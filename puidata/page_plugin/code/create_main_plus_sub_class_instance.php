<?php
$post['emailLinks']         = json_decode($post['emailLinks'], TRUE);
$filesArr                   = array();

foreach ($_FILES as $key => $file) {
    $instancePropId         = str_replace('filenodeZ', '', $key);
    $index                  = array_search($instancePropId, $post['instance_property_id']);
    $newFileName            = mt_rand() . '_' . $file['name'];
    //$uploadPath = __DIR__ . '/../../public/nodeZimg/';

    $return                 = 0;
    if($file["tmp_name"] != '')
    {
        $return             = $sdkApi->setFileData("public/nodeZimg/".$newFileName,$file["tmp_name"],'file');
        $return             = 1;
    }

    //if (move_uploaded_file($file["tmp_name"], $uploadPath . $newFileName)) {
    if ($return) {
        // set instance caption to store file name with path
        //$post['instance_property_caption'][$index] = UPLOAD_URL_API . $newFileName;
        if (!isset($post['instance_property_caption'])) {
            $post['instance_property_caption'] = array();
        }
        array_splice($post['instance_property_caption'], $index, 0, UPLOAD_URL_API . $newFileName);
    } elseif (isset($post['id_detail_instance_id'])) {
        // in case of form edit and file not uploaded
        if (isset($post['fileZvalue' . $instancePropId])) {
            //$post['instance_property_caption'][$index] = $post['fileZvalue' . $instancePropId];
            array_splice($post['instance_property_caption'], $index, 0, $post['fileZvalue' . $instancePropId]);
            unset($post['fileZvalue' . $instancePropId]);
        } else {
            $post['instance_property_caption'][$index] = '';
        }
    }
}

$dataArray = array();
if (isset($post['autogenerated']) && !empty($post['autogenerated'])) {
    $dataArray['autogenerated']             = explode(",", $post['autogenerated']);
}
$dataArray['col_head_prop_id']              = explode(",", $post['col_head_prop_id']);
$dataArray['node_instance_id']              = $post['id_detail_instance_id'];
$dataArray['node_class_id']                 = $post['node_class_id'];
$dataArray['node_class_property_id']        = $post['instance_property_id'];
$dataArray['value']                         = $post['instance_property_caption'];
$dataArray['is_email']                      = 'N';
$dataArray['status']                        = $post['id_detail_save_type'];
$dataArray['activeMenu']                    = explode(",", $post['activeMenu']);
$dataArray['login_user_id']                 = $post['login_user_id'];    //login_user_id
$dataArray['login_role_id']                 = $post['login_role_id'];    //login_role_id
$setting                                    = json_decode($post['list_setting_array'], true);
$nodeIdArray                                = json_decode($post['list_node_id_array'], true);
$data                                       = json_decode($post['list_head_array'], true);

$returnResponse                             = $builderApiObj->setDataAndStructure($dataArray, '1', '6');
$returnResponse                             = json_decode($returnResponse, true);

$instanceId                                 = $returnResponse['data']['instance_id'];

if ($instanceId > 0) {
    //save sub-class str and property.
    //for CONTROL MANAGEMENT CLASS
    if (isset($post['is_current_version']) && isset($post['main_role_id']) && $post['is_current_version'] == 'True' && $post['id_detail_save_type'] == 'P') {
        $builderApiObj->setManageClassInstanceForRole($instanceId, $post['main_role_id']);
    }

    $post['instance_id']                    = $instanceId;
    $post['saveType']                       = $returnResponse['data']['save_type'];

    //save sub-class str and property.
    $builderApiObj->saveSubClassStrLayout($post);
}

$listArray['header']                        = json_decode($builderApiObj->getListHeader($data), true)['data'];
$listArray['list']                          = $returnResponse['data']['list'];
$listArray['save_type']                     = $post['id_detail_save_type'];
$return                                     = 1;
$buildQueryArray                            = array();
$listHtml                                   = listContent($listArray, $setting, $nodeIdArray, $buildQueryArray, $return);

unset($returnResponse['data']['list']);
$returnResponse['data']['col_data'] = $listHtml;

$returnResponse['status'] = '1';
$returnResponse['message'] = '';

header('Content-Type: application/json');
print json_encode($returnResponse);
exit;
//        $resJsonArr = array('status' => '1', 'message' => '');
//        $resJsonArr['data'] = $returnResponse;
//        header('Content-Type: application/json');
//        print json_encode($resJsonArr);
//        exit;
        

?>