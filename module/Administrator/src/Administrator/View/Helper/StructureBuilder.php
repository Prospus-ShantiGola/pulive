<?php

namespace Administrator\View\Helper;

use Administrator\Controller\Plugin\AwsS3;
use Administrator\Controller\Plugin\MyTcpdf;
use Aws\AwsClient;
use Aws\S3\S3Client;
use Aws\Sdk;
use AwsModule\Factory\AwsFactory;
use AwsModule\View\Helper\S3Link;
use Zend\View\Helper\AbstractHelper;
use Administrator\Model\StructureBuilderTable;
use Administrator\Model\CourseDialogueTable;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\TableGateway\TableGateway;
use Zend\Session\Container;
use Zend\ServiceManager\ServiceLocatorInterface as ServiceLocator;

class StructureBuilder extends AbstractHelper {

    protected $table;
    protected $serviceLocator;
    protected $adapter;
    protected $courseDialogueTable;

    public function __construct(ServiceLocator $serviceLocator) {
        $this->serviceLocator = $serviceLocator;
        $this->adapter = $this->serviceLocator->get('Zend\Db\Adapter\Adapter');
        $this->table = new StructureBuilderTable($this->adapter);
        $this->courseDialogueTable = new CourseDialogueTable($this->adapter);
    }

    public function getStructure($node_id, $structure) {
        if ($structure == 'Class') {
            return $this->table->getAllDataOfClass($node_id, 'Y');
        }

        if ($structure == 'Instances') {
            return $this->table->getInstanceListOfComments($node_id);
        }

        if ($structure == 'Instance') {
            return $this->table->getMenuStructure($node_id);
        }

        if ($structure == 'PluginStructure') {
            return $this->table->getPluginStructure($node_id);
        }
    }

    public function getStructureOfInstance($propertyValue, $structure) {
        if ($structure == 'Instance') {
            return $this->table->getInstanceNodeIdByPropertyValue($propertyValue, $class_id = 193);
        }
    }

    /**
     * @param $data
     * @param $structure
     * @return array
     */
    public function setStructure($data, $structure,$arr=false) {

        //if(!$arr) {
            $dealInstanceArray = array();
            if ($structure == 'Instance') {
                if (isset($data['status']) && $data['status'] == 'D')
                    $status = 0;
                else
                    $status = 1;

                $saveType = '';
                $instance_node_id = '';
                if (intval($data['node_instance_id']) > 0) {
                    $instanceArray = $this->table->deleteInstanceProperty($data['node_instance_id'], $status);
                    $saveType = 'edit';
                } else {

                    $instanceArray = $this->table->createInstanceOfClass($data['node_class_id'], $status);

                    $saveType = 'add';
                }
                //print_r($data['value']);
                if (intval($instanceArray['node_instance_id']) > 0) {

                    $autogenerated = array();

                    if ($saveType == 'add') {

                        $autogenerated = $data['autogenerated'];
                        $instance_node_id = $instanceArray['node_id'];

                        /* Please on it.
                         * Modified By: Divya
                         * Purpose: When creating a deal, save User Info for that particular deal, so that we may know who has created this deal
                         * No updation Reaquired if anyone updates that deal information */
                        if (trim($data['login_user_id']) != '') {

                            $dealInstanceArray = $this->table->createInstanceOfClass(DEAL_ROLE_CLASS_ID, $status);

                            $deal_role_instance_id = $dealInstanceArray['node_instance_id'];
                            $deal_role_node_instance_id = $dealInstanceArray['node_id'];

                            $childKeyPropertyID = $this->table->getClassStructureProperty(DEAL_ROLE_CLASS_ID);

                            $propertyValue[0] = $data['login_user_id']; //node_id of login user
                            $propertyValue[1] = $data['login_role_id']; //node_id of login user's role
                            $propertyValue[2] = date('Y-m-d H:i:s');
                            $propertyValue[3] = '';
                            $propertyValue[4] = '';

                            $nodeType = 2;

                            $this->table->createInstancePropertySpreadSheet($childKeyPropertyID, $propertyValue, $deal_role_instance_id, $nodeType);

                            $this->table->createRelation($instance_node_id, array($deal_role_node_instance_id));
                        }
                        /* Task#262.4.17.7: Remove required role assignments RM should be auto (Kelly), and RA should remain unassigned for Revenue Team Queue */
                        /*if (is_array($data['value'][1])) {
                            $instanceKArray = $this->table->createInstanceOfClass($data['node_class_id'], $status);
                            $this->table->createInstanceProperty($data['node_class_property_id'], $data['value'][1], $instanceKArray['node_instance_id'], $instanceKArray['node_type_id'], $data['is_email'], $autogenerated, $instanceKArray['node_id']);
                        }*/
                        /* END Task#262.4.17.7 HERE */

                        /* End Here */
                    }

                    $data_value = $data['value'];

                    $this->table->createInstanceProperty($data['node_class_property_id'], $data_value, $instanceArray['node_instance_id'], $instanceArray['node_type_id'], $data['is_email'], $autogenerated, $instance_node_id);

                    /* Start Code By Amit And Ben For Deal Class */
                    // return only col header property id + values for listing
                    $colHeadResArr = array();
                    foreach ($data['col_head_prop_id'] as $colHead) {
                        if ($colHead != '') {
                            $pos = array_search($colHead, $data['node_class_property_id']);
                            $colHeadResArr[$colHead] = $data['value'][$pos];
                        }
                    }
                    $listArray = array();
                    if ($saveType == 'edit' && $data['activeMenu'][0] != '') {

                        $_oldStatus = $data['activeMenu'][0];
                        $_pos = array_search($data['activeMenu'][1], $data['node_class_property_id']);
                        $_newStatus = $data['value'][$_pos];
                        $instanceArray['statusChange'] = 0;
                        if (strtolower($_oldStatus) != strtolower($_newStatus)) {
                            $instanceArray['statusChange'] = 1;
                        }
                    }

                    $index = $instanceArray['node_instance_id'] . '~#~' . $instanceArray['node_id'] . '~#~';
                    $listArray[$index] = $colHeadResArr;

                    $instanceArray['list'] = $listArray;
                    $instanceArray['save_type'] = $saveType;
                    $instanceArray['instance_id'] = $instanceArray['node_instance_id'];
                    /* End Code By Amit And Ben For Deal Class */

                    /* Email for Admin When User Submits EOI Form */
                    if (intval($data['node_class_id']) == 648) {
                        $message = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
								<html xmlns="http://www.w3.org/1999/xhtml">
									<head>
									<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
										<title>Thanks Email</title>
									</head>
									<body>
										<table width="800" border="0" align="center" cellpadding="0" cellspacing="0">
											<tr>
												<td valign="top">
													<table width="100%" border="0" cellspacing="0" cellpadding="10">							
														<tr>
															<td valign="top" style="font-size:13px; font-family:Arial, Helvetica, sans-serif;">Hello, <br/><br/> The following user has shown interest for <b>CLUB INVESTIBLE:</b> 
															</td>
														</tr>				
														<tr>
															<td valign="top" style="font-size:13px; font-family:Arial, Helvetica, sans-serif;">
																<table style="font-size:13px; font-family:Arial, Helvetica, sans-serif;">
												                  <tr><td>Name:</td><td>' . $data['value'][0] . '</td></tr>
												                  <tr><td>Company:</td><td>' . $data['value'][1] . '</td></tr>
												                  <tr><td>Contact Number:</td><td>' . $data['value'][2] . '</td></tr>
												                  <tr><td>Email:</td><td>' . $data['value'][3] . '</td></tr>
												                  <tr><td>Interested In:</td><td>' . $data['value'][4] . '</td></tr>
												                  <tr><td>Message:</td><td>' . $data['value'][5] . '</td></tr>
												                </table>
															</td>
														</tr>
														
														<tr>
															<td valign="top" style="font-size:13px; font-family:Arial, Helvetica, sans-serif;">Best Regards,<br />The Investible HQ</td>
														</tr>				
													</table>
												</td>
											</tr>
										</table>
										<p>&nbsp;</p>
										<p>&nbsp;</p>
									</body>
								</html> ';

                        $subject = "Club Investible Expression of Interest";
                        //$to 		= 'connect@investible.com';
                        $to = 'arvind.soni@prospus.com';
                        $from = "info@creelprice.com";
                        $headers = '';
                        $headers = 'MIME-Version: 1.0' . PHP_EOL;
                        $headers .= 'Content-type: text/html; charset=iso-8859-1' . PHP_EOL;
                        $headers .= 'From: ' . @$from . '<' . @$from . '>' . PHP_EOL;
                        $headers .= 'Bcc: animesh.sharma@prospus.com, kuldeep.chauhan@prospus.com' . PHP_EOL;
                        // Mail is diabled for now
                        mail($to, $subject, $message, $headers);
                    }

                    return $instanceArray;
                }
            }

            if ($structure == 'Relation') {
                return $this->table->createRelation($data['node_y_id'], $data['node_x_ids']);
            }
//        }
//        else{
//
//
//        }
    }

    /* function here to use fetch node type id and node class property id bases of node class id */

    public function getOnlyPropertiesAgain($data, $temp) {
        foreach ($data as $key => $value) {
            if (is_array($value['child'])) {
                $temp = $this->getOnlyPropertiesAgain($value['child'], $temp);
            }

            if (!is_array($value['child'])) {
                $temp1['node_class_property_id'] = $value['node_class_property_id'];

                $temp1['caption'] = $value['caption'];

                $temp[] = $temp1;
            }
        }

        return $temp;
    }

    public function setStatement($dataPost, $structure, $classStructure) {
        $returnArray = array();
        foreach ($dataPost as $indexC => $dataArrayValue) {
            $tempDataArray = array();

            $tempDataArray = $dataArrayValue;

            $temp = array();
            $node_class_property_id = array();
            $node_class_property_value = array();
            $node_class_id = $classStructure['node_class_id'];
            $node_type_id = $classStructure['node_type_id'];
            $mainClass = $this->getOnlyPropertiesAgain($classStructure['Properties'], $temp);

            foreach ($mainClass as $key => $value) {
                if (trim($tempDataArray[strtolower($value['caption'])]) != "") {
                    $node_class_property_id[] = $value['node_class_property_id'];
                    $node_class_property_value[] = $tempDataArray[strtolower($value['caption'])];
                }
            }


            $dataP = array('node_class_id' => '90', 'node_class_property_id' => $node_class_property_id, 'value' => $node_class_property_value, 'status' => 1);
            $node_y_id = $this->setStructure($dataP, 'Instance');

            $node_x_id_array = array();
            if ($structure == 'Instance') {
                foreach ($classStructure['SubClass'] as $k => $v) {
                    $temp = array();
                    $node_class_property_id = array();
                    $node_class_property_value = array();
                    $node_class_id = $v['node_class_id'];
                    $node_type_id = $v['node_type_id'];
                    $tClass = $this->getOnlyPropertiesAgain($v['Properties'], $temp);
                    foreach ($tClass as $key => $value) {
                        if (trim($tempDataArray[strtolower($value['caption'])]) != "") {
                            $node_class_property_id[] = $value['node_class_property_id'];
                            $node_class_property_value[] = $tempDataArray[strtolower($value['caption'])];
                        }
                    }

                    $dataS = array('node_class_id' => '89', 'node_class_property_id' => $node_class_property_id, 'value' => $node_class_property_value, 'status' => 1);
                    $node_x_id_array[] = $this->setStructure($dataS, 'Instance');
                }
            }

            $newArray['node_y_id'] = $node_y_id;
            $newArray['node_x_ids'] = $node_x_id_array;
            $returnArray[] = $this->setStructure($newArray, 'Relation');
        }

        return $returnArray;
    }

    /* code here for fetch node instance id and node id bases of suerver id or value */

    public function getNodeInstanceStructure($structure, $chat_room_id, $startFrom, $limit, $dateTime) {
        $tempArray = array();

        if ($structure == 'Instances') {
            $totalLoop = intval($startFrom) + intval($limit);

            foreach ($chat_room_id as $key => $id) {
                $instanceData = $this->table->getNodeInstanceStructure($id);

                for ($i = intval($startFrom) - 1; $i < intval($totalLoop) - 1; $i++) {
                    if (!empty($instanceData[$i])) {

                        if ($dateTime != "") {

                            if (strtotime($dateTime) < strtotime($instanceData[$i]['addeddate'])) {
                                $tempArray[] = $instanceData[$i];
                            }
                        } else {
                            $tempArray[] = $instanceData[$i];
                        }
                    }
                }
            }
        }
        return $tempArray;
    }

    /* end code here */

    /**
     * Function to get the statement count associated with dialogue
     * Created by Arti Sharma for vessel wise
     */
    public function getSatementCountInfo($data_post) {
        return $this->table->getSatementCount($data_post);
    }

    public function getDealAppOneInfo($data_post) {
        return $this->table->getDealAppOneInfo($data_post);
    }

    public function getDealOperationInfo($data_post) {
        return $this->table->getDealOperationInfo($data_post);
    }

    /**
     * Function to get all the dialogue associated with the user
     * Created by Arti Sharma
     */
    public function getAllDialogue($variable_data, $structure) {
        if ($structure == 'Dialogue') {
            return $this->table->getAllDialogueInstances($variable_data, 'Y');
        }

        /* if($structure == 'Instances')
          {
          return $this->table->getInstanceListOfComments($node_id);
          } */
    }

    /**
     * Function to save all the statements
     * Created by Arti Sharma
     */
    public function saveStatement($data, $structure) {
        // return $data;
        if ($structure == 'Instance') {
            $jsonArray = json_decode($data, true);
            $message = $jsonArray['message'];
            $user_instance_node_id = $jsonArray['sender'];
            $dialog_instance_node_id = $jsonArray['messageto'];
            //return $jsonArray ;
            return $this->table->saveStatementInstance($jsonArray);
        }
    }

    public function getStatement($dialog_instance_node_id, $date_obj) {

        return $this->table->getAllStatementInstance($dialog_instance_node_id, $date_obj,"");
    }

    public function updateDialogTitle($variable_data) {

        return $this->table->saveDialogTitle($variable_data);
    }

    public function getDialogueActor($dialog_instance_node_id) {
        return $this->table->getDialogueActorData($dialog_instance_node_id);
    }

    public function getAllUserList($variable_data) {
        return $this->table->getAllUserListData($variable_data);
    }

    public function getClassInstanceValues($variable_data) {
        return $this->table->getClassInstanceValues($variable_data);
    }

    public function removeUserFromFile($dialog_data) {
        // return $this->table->insertAllUserInstances($dialog_instance_node_id, $user_instance_node_id, $event_type);
        return $this->table->removeDialogActor($dialog_data);
    }

    public function saveNewDialogueActor($dialog_data) {
        return $this->table->saveNewDialogueActorInstances($dialog_data);
    }

    public function saveNewDialog($dialog_data) {
        // return $this->table->saveNewDialogInstances($dialog_data);
        $variable_data['user_recepient_node_id'] = $dialog_data['user_instance_node_id'];
        $variable_data['course_title'] = $dialog_data['course_title'];
        $variable_data['dialogue_title'] = $dialog_data['dialogue_title'];
        $variable_data['user_instance_node_id'] = $dialog_data['creator_instance_node_id'];
        $variable_data['saveType'] = 'P';
        $variable_data['course_dialogue_type'] = $dialog_data['save_type'];
        $variable_data['dialogue_instance_node_id'] = $dialog_data['dialogue_instance_node_id'];
        $variable_data['course_instance_node_id'] = $dialog_data['course_value'];
        $variable_data['data_save'] = 'minidialogue';
        return $this->courseDialogueTable->saveNewDialogInstances($variable_data);
    }

    public function searchCourseTitle($search_data) {
        return $this->table->searchCourseByTitle($search_data);
    }

    public function generateRandomNodeId() {
        return $this->table->getLastNumber('node', 'node_id');
    }

    public function deleteStatement($delete_data) {
        return $this->table->deleteStatementInstance($delete_data);
    }

    public function searchDialog($dialog_data) {
        return $this->table->searchDialogDetail($dialog_data);
    }

    public function deleteNotification($dialog_data) {
        return $this->table->deleteNotificationCount($dialog_data);
    }

    public function deleteDilaogue($dialog_data) {
        return $this->table->deleteDilaogueData($dialog_data);
    }

    public function getAllSystemActor($dialog_data) {
        return $this->table->getAllSystemActorDetail($dialog_data);
    }

    /*
      commented by arti
      public function getAllCourseData($variable_data) {

      return $this->table->getAllCourseByUser($variable_data);
      } */

    public function checkEmailAlreadyExist($email_address) {
        return $this->table->checkEmailExist($email_address);
    }

    public function loginUser($data) {
        return $this->table->loginUser($data);
    }

    public function getFormStructure($node_id) {
        return $this->table->getFormStructure($node_id);
    }

    public function getDataOfMenuInstance($node_id) {
        return $this->table->getDataOfMenuInstance($node_id);
    }

    public function updateDealPhase($data = array()) {
        return $this->table->updateDealPhase($data);
    }

    public function getMenuCount($data = array()) {

        if($data['is_operation_list'] == 'true'){
          $_data['node_id'] = $this->getCurrentControl($data['data-node-id'])['active_node_id'];
          $_data['role_id'] = $data['roleId'];
          $_data['permission'] = 'condition';
          $_permission = $this->getOperationPermission($_data);
          if (!in_array('Can View', $_permission) || count($_permission) == 0) {
          //$data['permission'] = 'false';
          }
        }

        return $this->table->getMenuCount($data);
    }

    public function getListHeader($post) {
        return $this->table->getListHeader($post);
    }

    public function getPropertyInstanceWithCount($post) {
        return $this->table->getPropertyInstanceWithCount($post);
    }

    public function getInstanceDataByPropertyValue($post) {
        return $this->table->getInstanceDataByPropertyValue($post);
    }

    public function getDataOfList($post) {
        return $this->table->getDataOfList($post);
    }

    public function getFilterCounts($post) {
        return $this->table->getFilterCounts($post);
    }

    public function getInstanceViewStructure($node_id) {
        return $this->table->getInstanceViewStructure($node_id);
    }

    public function getInstanceEditStructure($instance_id) {
        return $this->table->getInstanceEditStructure($instance_id);
    }

    public function getInstancesOfOperationRole($class_node_id, $login_role_id, $instance_id) {
        return $this->table->getInstancesOfOperationRole($class_node_id, $login_role_id, $instance_id);
    }

    public function getActorList($post) {
        return $this->table->getActorList($post);
    }

    public function getActorWithRoleAndDeal($instanceId) {
        return $this->table->getActorWithRoleAndDeal($instanceId);
    }

    public function getOperationListByRoleAndDealPaymentType($post) {
        $_data['node_id'] = $this->getCurrentControl($post['deal_node_id'])['active_node_id'];
          $_data['role_id'] = $post['deal_actor_role_node_id'];
          $_data['permission'] = 'condition';
          $_permission = $this->getOperationPermission($_data);
          if (!in_array('Can View', $_permission) || count($_permission) == 0) {
          //return array();
          } 
        return $this->table->getOperationListByRoleAndDealPaymentType($post);
    }

    public function getDocumentData($post) {
        return $this->table->getDocumentData($post);
    }

    public function getFileRulesetArray($post) {
        return $this->table->getFileRulesetArray($post);
    }

    public function setDocumentStructure($dialog_data, $structure) {
        return $this->table->setDocumentStructure($dialog_data);
    }

    public function getAllClassInstance($data) {

        return $this->table->getAllClassInstance($data);
    }

    public function manageInstanceBySpreadsheet($data) {
        $_obj = $data;

        $classPropertyID = $propertyValue = array();
        $instanceId = $classId = $actionType = '';
        $nodeType = 2;
        $saveType = 'P';
        foreach ($_obj as $key => $value) {
            if ($value['actionType'] == 'delete') {
                $instanceId = (isset($value['instanceID'])) ? $value['instanceID'] : '';
                $actionType = $value['actionType'];
            } else {
                if ($value['propertyType'] != 'Check Box' && ($value['propertyValue'] == '' || empty($value['propertyValue']))) {
                    continue;
                }
                $instanceId = (isset($value['instanceID'])) ? $value['instanceID'] : '';
                $classId = $value['classID'];
                $classPropertyID[] = $value['propertyID'];
                $actionType = $value['actionType'];
                if ($value['propertyType'] == 'Check Box') {
                    $propertyValue[] = str_replace(',', CHECKBOX_SEPERATOR, $value['propertyValue']) . CHECKBOX_SEPERATOR;
                } else {
                    $propertyValue[] = $value['propertyValue'];
                }
            }
        }
        if ((empty($classId) || $classId == '') && $actionType != 'delete') {
            exit;
        }
        if ($actionType == 'delete' && $instanceId != '') {

            $this->table->deleteInstance(array($instanceId));
        } else if ($instanceId == '') {
            //Add
            $instanceId = $this->table->createInstance('', $classId, $nodeType, $saveType, '');
            $this->table->createInstancePropertySpreadSheet($classPropertyID, $propertyValue, $instanceId, $nodeType);
        } else {
            //update
            $_details = $this->table->fetchNodeInstancePropertyData($instanceId, $classPropertyID[0]);
            $nodeInstancePropertyId = $_details[0]['node_instance_property_id'];
            $this->table->updateInstanceProperty(array($nodeInstancePropertyId), $propertyValue, $classPropertyID, $instanceId, $nodeType);
        }
    }

    public function manageInstanceFileBySpreadsheet($data) {

        $value = $data;
        //return $_obj;
        $classPropertyID = $propertyValue = array();
        $instanceId = $classId = $actionType = '';
        $nodeType = 2;
        $saveType = 'P';

        if ($value['propertyValue'] != '' || !empty($value['propertyValue'])) {
            $instanceId = (isset($value['instanceID'])) ? $value['instanceID'] : '';
            $classId = $this->table->getTableCols(array('node_class_id'), 'node-class', 'node_id', $value['nodeID'])['node_class_id'];
            $classPropertyID[] = $value['propertyID'];
            $propertyValue[] = $value['propertyValue'];
            if ($instanceId == '') {
                //Add
                $instanceId = $this->table->createInstance('', $classId, $nodeType, $saveType, '');
                $this->table->createInstancePropertySpreadSheet($classPropertyID, $propertyValue, $instanceId, $nodeType);
            } else {
                //update
                //return array($instanceId,$classId,$classPropertyID,$propertyValue);
                $_details = $this->table->fetchNodeInstancePropertyData($instanceId, $classPropertyID[0]);
                if (count($_details)) {
                    $nodeInstancePropertyId = $_details[0]['node_instance_property_id'];
                    $this->table->updateInstanceProperty(array($nodeInstancePropertyId), $propertyValue, $classPropertyID, $instanceId, $nodeType);
                } else {
                    $this->table->createInstancePropertySpreadSheet($classPropertyID, $propertyValue, $instanceId, $nodeType);
                }
                //return $_details;
            }
        }
    }

    public function getNewNodeId() {

        return $this->table->getLastNumber('node', 'node_id');
    }

    public function checkMappingDealOperationNodeID($post) {
        return $this->table->checkMappingDealOperationNodeID($post);
    }

    public function getDealOperationFormId($post) {
        return $this->table->getDealOperationFormId($post);
    }

    public function getMappingRoleActorStructure($post) {
        return $this->table->getMappingRoleActorStructure($post);
    }

    public function getParticulerColumnValue($tableName, $primaryColumnName, $primaryColumnValue, $returnColumnValue) {
        return $this->table->getParticulerColumnValue($tableName, $primaryColumnName, $primaryColumnValue, $returnColumnValue);
    }

    public function getUserProfile($node_id, $node_class_id) {
        return $this->table->getUserProfile($node_id, $node_class_id);
    }

    public function getReportPdf($post) {

        //error_reporting(E_ALL);
        $pdf = new MyTcpdf('P', 'mm', 'A4', true, 'UTF-8', false);
        // set document information
        $pdf->SetCreator('Prospus');
        $pdf->SetAuthor('Prospus Consulting Ltd.');
        $pdf->SetTitle('Prospus');
        $pdf->SetSubject('PDF Generation');
        $pdf->SetKeywords('Prospus, PDF, Report');

        // PDF PATH
        $pdfFileName = 'document_' . $post['docid'] . '.pdf';
        $pdfFilePath = ABSO_URL . 'public/pdf/' . $pdfFileName;
        $generatedPdfPath = BASE_URL . 'public/pdf/' . $pdfFileName;

        // CSS PATH
        $cssPath = '<style>';
        //$cssPath .= file_get_contents(ABSO_URL . 'puidata/page_plugin/css/editor-print.css');
        //$cssPath .= file_get_contents(ABSO_URL . 'puidata/page_plugin/css/editor-pdf.css');
        $cssPath .= file_get_contents(ABSO_URL . 'puidata/page_plugin/css/table-pdf.css');
        $cssPath .= file_get_contents(ABSO_URL . 'puidata/page_plugin/css/fonts/fonts.css');
        /* $cssPath .= file_get_contents(ABSO_URL.'puidata/page_plugin/css/edt-style.css');
          $cssPath .= file_get_contents(ABSO_URL.'puidata/page_plugin/css/editor.css');
          $cssPath .= file_get_contents(ABSO_URL.'puidata/css/bootstrap.min.css');
          $cssPath .= file_get_contents(ABSO_URL.'puidata/page_plugin/component/common-style.css'); */
        $cssPath .= '</style>';

        //$logoUrl = BASE_URL . 'public/img/prospus-logo-100_88.jpg';
        //$logoImg = '<img src="' . $logoUrl . '" />';

        $pdf->setPageUnit('px');

        //$pdf->SetHeaderData($logo, 100, '', '', array(0,64,255), array(0,64,128));
        //$pdf->setFooterData(array(0,64,0), array(0,64,128));
        // set margins, left top right
        $pdf->SetMargins(60, 80, 60, true);
        //$pdf->SetLineStyle(array('width' => 0.25 / $this->k, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(255, 255, 255)));
        // set auto page breaks
        $pdf->SetAutoPageBreak(TRUE, 100);

        //$pdf->SetPrintHeader(false);
        //$pdf->SetPrintFooter(false);
        $pdf->SetFooterMargin(30);
        $pdf->SetHeaderMargin(30);
        $pdf->SetLineStyle(5);
        //$pdf->SetLineWidth(5);
        //$pdf->setCellHeightRatio(0.8);

        /* // set certificate file
          $certificate = 'file://data/cert/tcpdf.crt';
          // set additional information
          $info = array(
          'Name' => 'TCPDF',
          'Location' => 'Office',
          'Reason' => 'Testing TCPDF',
          'ContactInfo' => 'http://www.tcpdf.org',
          );
          // set document signature
          $pdf->setSignature($certificate, $certificate, 'tcpdfdemo', '', 2, $info); */
        $pdf->SetFont('', '', 10);

        // added by anjali            
        $pdf->SetCellPadding(0);
        $tagvs = array('div' => array(0 => array('h' => 0, 'n' => 0), 1 => array('h' => 0, 'n' => 0)));
        $pdf->setHtmlVSpace($tagvs);
        $pdf->setCellHeightRatio(1.5);

        // closed here


        $pdf->AddPage();

        /* $txt = 'AMIT MALAKAR';
          $pdf->MultiCell(55, 5, $txt, 1, 'J', 1, 2, 125, 210, true); // J-Justify,L-Left,R-Right,C-Center,''-Default */

        // Set some content to print
        $html = $post['html'];
        // clean form tags and scripts
        //$html = preg_replace('/(<script[^>]*>.*<\/script>)/','',$html);
        $html = preg_replace('/(<form[^>]*>)/', '', $html);
        $html = preg_replace('/(<\/form>)/', '', $html);
        $html = preg_replace('/(<br>)/', '', $html);

        //$html = $post['html'];
        //$html = '<input type="hidden" id="mapping_ins_content_id" value="592185"><div class="edtContainer structuredMode" style="display:block">';
        $html = $cssPath . $html;

        // Print text using writeHTMLCell()
        //$pdf->writeHTMLCell('', '', '', '', $html, 1, 0, 1, true, '', true);//writeHTMLCell(0, 0, '', '', $html, 0, 1, 0, true, '', true);
        $pdf->writeHTML($html, false, false, false, true, '');



        // BACKGROUND LOGO >>>
        //$pdf->SetAlpha(0.3);
        //$img_file = ABSO_URL . 'public/img/prospus-logo.png';
        //$pdf->image($img_file, 150, 250, 275, 185, '', '', '', false, 300, '', false, false, 0);
        //$pdf->SetAlpha(1);
        // <<< BACKGROUND LOGO
        // PAGE NUMBER >>>
        $pdf->Cell(0, 10, 'Page ' . $pdf->getAliasNumPage() . ' of ' . $pdf->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');
        // >>> PAGE NUMBER
        // SET SIGNATURE >>>
        // create content for signature (image and/or text)
        //$pdf->Image('D:\xampp\htdocs\PUI\public\nodeZimg\joy.png', 380, 660, 121, 50, 'PNG');
        // define active area for signature appearance
        //$pdf->setSignatureAppearance(180, 60, 15, 15);
        // set an empty signature appearance
        //$pdf->addEmptySignatureAppearance(180, 80, 15, 15);
        // <<< SET SIGNATURE

        $pdf->Output($pdfFilePath, 'F');   // I-browser, F-save files, E-email attachment,

        // upload to AWS
        $sdkApi		= new AwsS3();
        $xml = $sdkApi->setFileData("public/pdf/".$pdfFileName, $pdfFilePath ,"file");
        $generatedPdfPath = urldecode($xml['object_url']);

        // unlink local PDF file
        unlink($pdfFilePath);

        return $generatedPdfPath;
    }

    public function getWkPdf($post) {
        //return $this->table->getWkPdf($post);
        // URL TO CONVERT TO PDF
        //$url = 'http://stackoverflow.com/questions/22789618/digital-signing-of-pdf';
        // CSS LINK
        $cssLink = '';
        if (isset($post['type']) && $post['type'] == 'report') {
            // WORKFLOW DOCUMENT PDF
            $cssLink .= '<link href="' . BASE_URL . 'puidata/page_plugin/css/table-pdf.css" rel="stylesheet">';
            $cssLink .= '<link href="' . BASE_URL . 'puidata/page_plugin/css/fonts/fonts.css" rel="stylesheet">';
        } else {
            // DEAL DETAILS, WORKFLOW DETAILS PDF
            $cssLink .= '<link href="' . BASE_URL . 'puidata/css/bootstrap.min.css" rel="stylesheet">';
            $cssLink .= '<link href="' . BASE_URL . 'RandD/listing-details.css" rel="stylesheet">';
        }

        // PDF PATH
        //ppc class
        if (trim($post['fileDocType']) != '' && trim($post['fileDocType']) == 'review') {
            $pdfFileName = 'review_' . $post['docid'] . '.pdf';
            $cssLink .= '<link href="' . BASE_URL . 'puidata/page_plugin/css/table-pdf.css" rel="stylesheet">';
        } else {
            if (trim($post['fileParam']) == '') {
                $pdfFileName = 'deal_' . $post['docid'] . '.pdf';
            } else {
                $fileParam = explode("@#@", $post['fileParam']);
                $implode = implode("_", $fileParam);
                $pdfFileName = $implode . '.pdf';
            }
        }

        // HTML TO CONVERT TO PDF
        $htmlOutput = $cssLink . '<meta charset="UTF-8" /><div id="wkpdf_wapper">' . $post['html'] . '</div>';

        $pdfFilePath = ABSO_URL . 'public/pdf/' . $pdfFileName;
        $generatedPdfPath = BASE_URL . 'public/pdf/' . $pdfFileName;

        // IMAGE PATH
        $imgFileName = 'wk_image.jpg';
        $imgFilePath = ABSO_URL . 'public/pdf/' . $imgFileName;
        $generatedImgPath = BASE_URL . 'public/pdf/' . $imgFileName;

        // GENERATE FROM URL
        /* $this->serviceLocator->get('mvlabssnappy.pdf.service')->generate($url, $pdfFilePath, array(), true);
          $this->serviceLocator->get('mvlabssnappy.image.service')->generate($url, $imgFilePath, array(), true); */

        // OPTIONS
        $options = array(
            'margin-top' => 10, //25,
            'margin-bottom' => 10, //25,
            'margin-left' => 10, //20,
            'margin-right' => 10, //20,
            'orientation' => 'portrait',
        );

        // GENERATE FROM HTML
        $this->serviceLocator->get('mvlabssnappy.pdf.service')->generateFromHtml($htmlOutput, $pdfFilePath, $options, true);
        //$this->serviceLocator->get('mvlabssnappy.image.service')->generateFromHtml($htmlOutput, $imgFilePath, array(), true);

        // upload to AWS
        $sdkApi		= new AwsS3();
        $xml = $sdkApi->setFileData("public/pdf/".$pdfFileName, $pdfFilePath ,"file");
        $downloadFilePath = urldecode($xml['object_url']);

        // unlink local PDF file
        unlink($pdfFilePath);

        return $downloadFilePath;//$generatedPdfPath;
    }

    public function getRoleName($role_id) {
        return $this->table->getRoleName($role_id);
    }

    public function getInstanceListOfParticulerClass($post) {
        return $this->table->getInstanceListOfParticulerClass($post['primaryId'], $post['searchOn'], $post['keyType']);
    }

    /**
     * Delete the class instance.
     * @param type $post
     * @return type
     *
     */
    public function deleteInstance($post) {
        return $this->table->deleteInstance($post);
    }

    public function getTableCols($post) {
        return $this->table->getTableCols($post['colsArr'], $post['table_name'], $post['whereCols'], $post['value']);
    }

    public function updateOperationStatus($post) {
        return $this->table->updateOperationStatus($post);
    }

    public function getFiQuoteValue($post) {
        return $this->table->getFiQuoteValue($post);
    }

    public function getInstanceIdByTwoValue($post) {
        return $this->table->getInstanceIdByTwoValue($post);
    }

    public function callMapping($post) {
        return $this->table->callMapping($post);
    }

    public function getClassDetailFromProperty($post) {
        return $this->table->getClassDetailFromProperty($post);
    }

    public function getEmailHeader($firstName = '', $socialLink = array()) {
        // error_reporting(E_ALL);
        $siteLink = "http://" . $_SERVER['HTTP_HOST'];
        if ($_SERVER['HTTP_HOST'] == 'localhost') {
            $siteLink = "http://" . $_SERVER['HTTP_HOST'] . '/PUI';
        }
        $logourl = !empty($socialLink['logourl']) ? $socialLink['logourl'] : '#';
        $fb = (!empty($socialLink['fb'])) ? $socialLink['fb'] : '#';
        $twitter = (!empty($socialLink['twitter'])) ? $socialLink['twitter'] : '#';
        $instagram = (!empty($socialLink['instagram'])) ? $socialLink['instagram'] : '#';
        $youtube = (!empty($socialLink['youtube'])) ? $socialLink['youtube'] : '#';
        $emailHeader = '<table width="100%"  border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#f5f5f5">
      <tr>
          <td height="10" style="height:10px;">&nbsp;</td>
      </tr>
      <tr>
        <td valign="top" >
        <table border="0" align="center" cellpadding="0" cellspacing="0">
      <tr>
        <td width="10" style="width:20px;">&nbsp;</td>
        <td valign="top"><table  border="0" align="center" cellpadding="35" cellspacing="0" bgcolor="#FFFFFF" >
        <tr>
          <td><table cellpadding="0" cellspacing="0">
              <tr>
                <td class="pattern" width="600" align="center"><table cellpadding="0" cellspacing="0">
                    <tr>
                      <td class="col" width="238" valign="top"><table cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="hero_image"><a href="' . $logourl . '" target="_blank"><img src="' . $siteLink . '/public/img/mail/logo.jpg" alt=""/></a></td>
                          </tr>
                        </table></td>
                      <td class="spacer" width="40" style="font-size: 1px;">&nbsp;</td>
                      <td class="col" valign="middle"><table cellpadding="0" cellspacing="0">
                          <tr>
                            <td class="hero_image"><table width="50%" border="0" cellspacing="0" cellpadding="0" align="right">
                                <tr>
                                  <td width="57"><table border="0" cellspacing="0" cellpadding="0">
                                      <tr>
                                        <td ><a href="' . $fb . '" target="_blank"><img src="' . $siteLink . '/public/img/mail/facebook-icon.jpg" alt=""  /></a></td>
                                      </tr>
                                    </table></td>
                                  <td width="30">&nbsp;</td>'
                . '<td width="57"><table border="0" cellspacing="0" cellpadding="0">
                                      <tr>
                                        <td width="57"><table border="0" cellspacing="0" cellpadding="0">
                                            <tr>
                                              <td ><a href="' . $twitter . '" target="_blank"><img src="' . $siteLink . '/public/img/mail/twitter-icon.jpg" alt=""  /></a></td>
                                            </tr>
                                          </table></td>
                                      </tr>
                                    </table></td>
                                  <td width="30">&nbsp;</td>'
                . '<td width="57"><table border="0" cellspacing="0" cellpadding="0">
                                      <tr>
                                        <td ><a href="' . $instagram . '" target="_blank"><img src="' . $siteLink . '/public/img/mail/instagram.jpg" alt=""  /></a></td>
                                      </tr>
                                    </table></td>
                                  <td width="30">&nbsp;</td>'
                . '<td width="57"><table border="0" cellspacing="0" cellpadding="0">
                                      <tr>
                                        <td ><a href="' . $youtube . '" target="_blank"><img src="' . $siteLink . '/public/img/mail/youtube-icon.jpg" alt=""  /></a></td>
                                      </tr>
                                    </table></td>
                                </tr>
                              </table></td>
                          </tr>
                        </table></td>
                    </tr>
                  </table></td>
              </tr>
              <tr>
                <td style="height:34px; border-bottom:2px #dadada solid">&nbsp;</td>
              </tr>
              <tr>
                <td style="height:34px;"></td>
              </tr>
              <tr>
                <td width="10" valign="top" style="height:34px; border-bottom:2px #dadada solid; line-height:34px;"><table width="100%" border="0" cellpadding="0" cellspacing="0">
                  <tr>
                    <td width="10">&nbsp;</td>
                    <td valign="top"><table width="100%" border="0" align="center" cellpadding="0" cellspacing="0">
                      <tr>
                        <td style="font:13px Arial, Helvetica, sans-serif; color:#333333"> Hello ' . $firstName . ',</td>
                      </tr><tr><td style="height:20px;">&nbsp;</td></tr>';


        return $emailHeader;
    }

    public function getEmailFooter($privacyPolicy = '#') {
        $emailFooter = '<tr><td style="height:20px;">&nbsp;</td></tr>'
                . '<tr>'
                . '<td style="font:13px Arial, Helvetica, sans-serif; color:#333333;">If you have any questions please contact us directly at  <a href="mailto:' . SITE_SUPPORT_EMAIL . '" target="_blank" style=" text-decoration:underline; color:#004E83">' . SITE_SUPPORT_EMAIL . '</a>.</td>'
                . '</tr>'
                . '<tr><td style="height:20px;"></td></tr>'
                . '<tr>'
                . '<td style="font:13px Arial, Helvetica, sans-serif; color:#333333;">
                    Thank you.<br>MarineMax Team.
                    </td>'
                . '</tr>';
        $emailFooter .= '<tr><td style="height:34px;"></td></tr>'
                . '</table></td><td>&nbsp;</td></tr></table></td></tr>'
                . '<tr><td style="height:34px;"></td></tr>'
                . '<tr><td align="center" valign="top" style="font:11px Arial, Helvetica, sans-serif; color:#666666; height:20px"> Copyright ' . date('Y') . ' MarineMax, Inc. All rights reserved. </td></tr>'
                . '<tr><td align="center" valign="top" style="font:11px Arial, Helvetica, sans-serif; color:#666666; height:20px;"> 2600 McCormick Drive Suite 200 | Clearwater, FL 33759 </td></tr>'
                . '<tr><td align="center" valign="top" style="font:11px Arial, Helvetica, sans-serif; color:#666666"><a href="' . $privacyPolicy . '" target="_blank" style="color:#004E83;  text-decoration:underline;">Privacy Policy</a></td></tr>'
                . '</table>'
                . '</td>'
                . '</tr>'
                . '</table>'
                . '</td>'
                . '<td width="10"  style="width:20px;">&nbsp;</td>'
                . '</tr>'
                . '</table>'
                . '</td>'
                . '</tr>'
                . '<tr>'
                . '<td height="10" style="height:10px;">&nbsp;</td>'
                . '</tr>'
                . '</table>';
        /* . '======================================================='
          . '<tr><td style="font:13px Arial, Helvetica, sans-serif; color:#333; line-height:20px;">Thank you.</td></tr>'
          . '<tr><td  style="font:13px Arial, Helvetica, sans-serif; color:#333; line-height:20px;">MarineMax Team.</td></tr>'
          . '<tr><td style="font:13px Arial, Helvetica, sans-serif; color:#333;">&nbsp;</td></tr>'
          . '<tr><td style="font:13px Arial, Helvetica, sans-serif; color:#333;">&nbsp;</td></tr>'
          . '</table></td><td></td>'
          . '</tr>'
          . '</table></div>'; */
        return $emailFooter;
    }

    public function getEmailTemplate($data = array()) {

        $siteLink = "http://" . $_SERVER['HTTP_HOST'];
        if ($_SERVER['HTTP_HOST'] == 'localhost') {
            $siteLink = "http://" . $_SERVER['HTTP_HOST'] . '/PUI';
        }
        extract($data);
        $html = '<style type="text/css">
                    @media only screen and (max-width: 599px) {
                        td[class="pattern"] table {
                                width: 100%;
                        }
                        td[class="pattern"] .hero_image img {
                                width: 100%;
                                height: auto !important;
                        }
                    }
                    @media only screen and (max-width: 450px) {
                        td[class="pattern"] .spacer {
                                display: none;
                        }
                        td[class="pattern"] .col {
                                width: 100%;
                                display: block;
                        }
                        td[class="pattern"] .col:first-child {
                                margin-bottom: 30px;
                        }
                        td[class="pattern"] .hero_image img {
                                width: 100%;
                        }
                        a{
                                color: #004E83!important;
                                text-decoration: underline!important;
                        }
                    }
             </style>';
        switch ($type) {
            case 'sendMailAfterRoleAssign':
                $html .= $this->getEmailHeader($fname, $emailLinks['socialLink']);
                $html .= '<tr>'
                        . '<td style="font:13px Arial, Helvetica, sans-serif; color:#333333">'
                        . 'You have been appointed as the ' . $roleName . ' on Deal ' . $dealId . '. Please <a style="color:#004E83; text-decoration:underline;" href="' . $loginURL . '">login</a> to view the details of the Deal.'
                        . '</td>'
                        . '</tr>'
                        . '<tr>';
                $html .= $this->getEmailFooter($emailLinks['privacyPolicy']);
                return ($html);
                break;
            case 'sendMailAfterOpCompeleted':
                $operationName = '';
                //return $operation['name'];
                foreach ($operation as $key => $value) {
                    $operationName .= '<tr><td><table><tr><td style="width:10px;vertical-align: middle;"><img src="' . $siteLink . '/public/img/mail/square.png"/></td><td style="font:13px Arial, Helvetica, sans-serif; color:#333; line-height:20px;width:98%;vertical-align: middle;">' . trim(ucwords(html_entity_decode($value['Name']))) . '</td></tr></table></td></tr>';
                }
                $operationName = wordwrap($operationName, 75, "\n");
                $html .= $this->getEmailHeader($fname, $emailLinks['socialLink']);
                $html .= '<tr>'
                        . '<td style="font:13px Arial, Helvetica, sans-serif; color:#333333">'
                        . 'The ' . $roleTitle . ' of Deal ' . $dealId . ' has updated the following operation(s).'
                        . '</td>'
                        . '</tr>'
                        . '<tr><td>&nbsp;</td></tr>'
                        . $operationName
                        . '<tr><td>&nbsp;</td></tr>'
                        . '<tr>'
                        . '<td style="font:13px Arial, Helvetica, sans-serif; color:#333333">'
                        . 'Please <a href="' . $loginURL . '">login</a> to view the details of the Deal operation(s).'
                        . '</td>'
                        . '</tr>';
                $html .= $this->getEmailFooter($emailLinks['privacyPolicy']);
                return ($html);
                break;
        }
    }

    public function publishDeal($variable_data) {
        return $this->table->publishDeal($variable_data);
    }

    /*
     * Created By: Divya Rajput
     * Purpose: To fetch course and Dialogue data
     */

    public function fetchAllCourseData($email_id) {
        $config = $this->serviceLocator->get('config');
        return $this->table->fetchAllCourseData($config, $email_id);
    }

    /*
     * Created By: Divya Rajput
     * Purpose: To fetch Statement data on behalf of course's dialogue id
     */

    public function fetchAllDialogueData($email_id, $courseDataArray) {
        return $this->table->fetchAllDialogueData($email_id, $courseDataArray);
    }

    public function insertClassProperty() {
        return $this->table->insertClassProperty();
    }

    public function getInstanceIdOfSubClass($post) {
        return $this->table->getInstanceIdOfSubClass($post);
    }

    public function getVisibleNRequiredRoles($post) {
        return $this->table->getVisibleNRequiredRoles($post);
    }

    public function getDealPermissions($post) {
        return $this->table->getDealPermissions($post);
    }

    /*
     * Created By: Divya Rajput
     * Purpose: To check net is connected or not
     */

    public function isNetConnect() {
        return $this->table->isNetConnect();
    }

    /*public function getAllClassList($data) {
        return $this->table->getAllClassList($data);
    }*/

    public function getClassPropertyStrVal($data) {
        return $this->table->getClassPropertyStrVal($data);
    }

    /*
     * Created By: Divya Rajput
     * Purpose: To fetch all users and their details
     */

    public function fetchAllUsersDetails() {
        return $this->table->fetchAllUsersDetails();
    }

    public function getNodeXOfParticulerClass($post) {
        return $this->table->getNodeXOfParticulerClass($post['id'], $post['fieldEqualTo'], $post['fieldSend'], $post['node_class_id']);
    }

    public function getCanvasData($data) {
        return $this->table->getCanvasData($data);
    }

    public function updateDealInstance() {
        $finalArr = array();
        $resData = $this->table->getInstanceListOfParticulerClass(655, 'class', 'node_id');

        $customerData = $this->table->getInstanceListOfParticulerClass(CUSTOMER_CLASS_ID, 'class', 'node_id');
        //$customerData                           = json_decode($customerData, true);

        $stockData = $this->table->getInstanceListOfParticulerClass(UNIT_CLASS_ID, 'class', 'node_id');
        //$stockData                                      = json_decode($stockData, true);
        $count = 0;
        $node_y_id = '';
        foreach ($resData as $key => $value) {
            //echo $key.'<br/>';

            $customerInsId = '';
            foreach ($customerData as $key1 => $value1) {
                if (intval($value1['CustomerNo']) == intval($value['Customer #'])) {
                    $customerInsId = $key1;
                    //echo '$customerInsId '.$key1 . '<br/>';
                }
            }
            $stockInsId = '';
            foreach ($stockData as $key1 => $value1) {
                if (intval($value1['StockNo']) == intval($value['Stock #'])) {
                    $stockInsId = $key1;
                    //echo '$stockInsId' . $key1 . '<br/>';
                }
            }

            $node_y_id = intval($key);
            $sales_quote_val = '';
            $fi_quote_val = '';
            if ($customerInsId != '')
                $customer_val = CUSTOMER_CLASS_NID . '~$~' . $customerInsId;

            if ($stockInsId != '')
                $stock_val = UNIT_CLASS_NID . '~$~' . $stockInsId;


            /* For Subclass Instance Id */
            $_newArr = array();
            $_newArr = $this->table->getInstanceIdOfSubClass(array('class_id' => OPERATION_PROPERTY_MAP_DEAL_CLASS_ID, 'y_instance_node_id' => $node_y_id));
            //print_r($_newArr);
            $newDataArray['node_instance_id'] = intval($_newArr);
            $newDataArray['node_class_id'] = OPERATION_PROPERTY_MAP_DEAL_CLASS_ID;
            $newDataArray['node_class_property_id'] = array(CUSTOMER_PID, STOCK_PID, SALES_QUOTE_PID, FI_QUOTE_PID);
            $newDataArray['value'] = array($customer_val, $stock_val, $sales_quote_val, $fi_quote_val);
            $newDataArray['is_email'] = 'N';
            $newDataArray['status'] = 'P';
            //print_r($newDataArray);
            //$finalArr[] = $newDataArray;

            $returnOpeDealResponse = $this->setStructure($newDataArray, 'Instance');
            $finalArr[] = $returnOpeDealResponse;
            //$returnOpeDealResponse = json_decode($returnOpeDealResponse, true);
            //print_r($returnOpeDealResponse);
            $node_x_id[] = intval($returnOpeDealResponse['node_id']);

            if ($_newArr['data'] == '') {
                $newArray['node_y_id'] = $node_y_id;
                $newArray['node_x_ids'] = $node_x_id;
                $returnRResponse = $this->setStructure($newArray, 'Relation');
            }
            sleep(1);
        }
        return $finalArr;
    }

    public function getClassPropertyList($data) {
        return $this->table->getClassPropertyList($data);
    }

    public function getTemplateType($data) {
        return $this->table->getTemplateType($data);
    }

    public function checkPerformaceReviewDocId($data) {

        return $this->table->checkPerformaceReviewDocId($data);
    }

    public function setPerformanceReview($dialog_data, $structure) {
        return $this->table->setPerformanceReview($dialog_data);
    }

    public function dealRejection($data = array()) {
        $awsObj = $data['awsObj'];
        // Get All Instance of Pass Deal Class
        $operationPhase = $this->table->getInstanceListOfParticulerClass(PASSED_DEAL_BY_ROLES_CLASS_ID, 'class', 'node_id');
        $instance_node_id = $data['deal_node_id'];
        $deal_instance_id = $data['deal_instance_id'];
        $login_user_id = $data['login_user_id'];
        $login_role_id = $data['login_role_id'];
        $reason = $data['reason'];
        // get only rejected deal data
        foreach ($operationPhase as $data) {
            if ($data['Deal'] == $instance_node_id && $data['Is Active'] == 1) {
                $history = $data;
            }
        }
        // Create Instance of Rejection Class
        $prevRole = $history['From Role'];
        $dealRejectInstanceArray = $this->table->createInstanceOfClass(DEAL_REJECT_CLASS_ID, 1);
        $deal_reject_instance_id = $dealRejectInstanceArray['node_instance_id'];
        $deal_reject_node_instance_id = $dealRejectInstanceArray['node_id'];
        $childKeyPropertyID = $this->table->getClassStructureProperty(DEAL_REJECT_CLASS_ID);
        $mappingRoleActor = $this->table->getInstanceListOfParticulerClass(MAPPING_ROLE_ACTOR_CLASS_ID, 'class', 'node_id');
        $prevUser = '';
        foreach ($mappingRoleActor as $key => $value) {
            if ($value['Role'] == $prevRole && $value['Deal'] == $instance_node_id) {
                $prevUser = $value['Actor'];
                break;
            }
        }
        // Save Rejected Deal to Rejection Class
        $curPhase = '1';
        $prevPhase = '2';
        $propertyValue[0] = $login_role_id; //node_id of login user's role
        $propertyValue[1] = $login_user_id; //node_id of login user
        $propertyValue[2] = $curPhase;
        $propertyValue[3] = $prevRole;
        $propertyValue[4] = $prevUser;
        $propertyValue[5] = $prevPhase;
        $propertyValue[6] = date('Y-m-d H:i:s');
        $propertyValue[7] = $reason;
        $nodeType = 2;
        $this->table->createInstancePropertySpreadSheet($childKeyPropertyID, $propertyValue, $deal_reject_instance_id, $nodeType);
        // Create Relation
        $this->table->createRelation($instance_node_id, array($deal_reject_node_instance_id));
        // Pass the deal New Instance
        $fromRole = $history['To Role'];
        // Return Deal Rules Array
        $returnDealArr = array(
            ROLE_TEAM_SUPPORT => array('role_name' => 'Team Support', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_SALES_CONSULTANT => array('role_name' => 'Sales Consultant', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_SELLER => array('role_name' => 'Seller', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_BUYER => array('role_name' => 'Buyer', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_BM => array('role_name' => 'Business Manager', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_REVENUE_ACCOUNTANT => array('role_name' => 'Revenue Accountant', 'to_role' => ROLE_BM),
            ROLE_REVENUE_MANAGER => array('role_name' => 'Revenue Manager', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_CONTROLLER => array('role_name' => 'Controller', 'to_role' => ROLE_REVENUE_ACCOUNTANT),
            ROLE_DIRECTOR => array('role_name' => 'Director', 'to_role' => ROLE_REVENUE_ACCOUNTANT)
        );
        $toRole = $returnDealArr[$login_role_id]['to_role'];
        $timestamp = date('Y-m-d H:i:s');
        $dataArray['node_class_id'] = PASSED_DEAL_BY_ROLES_CLASS_ID;
        $dataArray['node_class_property_id'] = array(PASSED_DEAL_D_PID, PASSED_DEAL_FR_PID, PASSED_DEAL_TR_PID, PASSED_DEAL_A_PID, PASSED_DEAL_TIMESTAMP);
        $dataArray['value'] = array($instance_node_id, $fromRole, $toRole, 1, $timestamp);
        $dataArray['is_email'] = 'N';
        $dataArray['status'] = 'P';
        $instance_id = $this->setStructure($dataArray, 'Instance')['instance_id'];
        
        //Status and Sub-Status 
        $dealSubStatus['deal_instance_id'] = $deal_instance_id; //current deal instance id
        $dealSubStatus['role_id'] = $toRole; //Deal (control) pass to this role
        $dealSubStatus['role_id'] = $toRole; //Deal (control) pass to this role
        $dealSubStatus['awsObj'] = $awsObj;
        $statusArr = $this->updateDealStatus($dealSubStatus);
        // Update the Previous Deal 
        if ($instance_id > 0) {
            $nodeInstancePropertyIdArr = $this->table->getInstanceofPassDealClass(PASSED_DEAL_BY_ROLES_CLASS_ID, $instance_id, $instance_node_id);
            if (count($nodeInstancePropertyIdArr) > 0) {
                $previous_history = array();
                $previous_history = array('0' => $nodeInstancePropertyIdArr[0]);
                unset($nodeInstancePropertyIdArr[0]);
                // Update All previous pass deals
                if (count($nodeInstancePropertyIdArr) > 0) {
                    $this->table->updateInstanceofPassDealClass($nodeInstancePropertyIdArr, '2');
                }
                // Update Previous Rejected Deal
                if (count($previous_history) > 0) {
                    $this->table->updateInstanceofPassDealClass($previous_history, '', '2');
                }
            }
        }
        $arr = array('from_role'=>$fromRole, 'to_role'=>$toRole, 'deal_instance_id'=>$deal_instance_id, 'deal_status'=> $statusArr);
        return $arr;
    }

    public function rejectDeal($data = array()) {
        //return array(OPERATION_PHASE_CLASS_ID,DEAL_REJECT_CLASS_ID,DEAL_PHASE_PROPERTY_ID,DEAL_PHASE_VERSION_PROPERTY_ID,PHASE_SEQUENCE,PHASE_DEAL_P_ID, PHASE_PHASE_P_ID, PHASE_ROLE_P_ID, PHASE_STATUS_P_ID,OPERATION_CLASS_ID,MAPPING_ROLE_ACTOR_CLASS_ID,MAPPING_DEAL_OPERATION_CLASS_ID);
        $operationPhase = $this->table->getInstanceListOfParticulerClass(OPERATION_PHASE_CLASS_ID, 'class', 'node_id');

        $instance_node_id = $data['deal_node_id'];
        $deal_instance_id = $data['deal_instance_id'];
        $login_user_id = $data['login_user_id'];
        $login_role_id = $data['login_role_id'];
        $reason = $data['reason'];

        $dealRejectInstanceArray = $this->table->createInstanceOfClass(DEAL_REJECT_CLASS_ID, 1);
        $deal_reject_instance_id = $dealRejectInstanceArray['node_instance_id'];
        $deal_reject_node_instance_id = $dealRejectInstanceArray['node_id'];
        $childKeyPropertyID = $this->table->getClassStructureProperty(DEAL_REJECT_CLASS_ID);

        //Deal Phase 
        $dealPhase = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($deal_instance_id, DEAL_PHASE_PROPERTY_ID))['value'];
        $dealPhaseVersionId = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($deal_instance_id, DEAL_PHASE_VERSION_PROPERTY_ID))['value'];
        $phaseSeqInstanceId = $this->table->getTableCols(array('node_instance_id'), 'node-instance', array('node_id'), array($dealPhaseVersionId))['node_instance_id'];
        $dealPhaseSeq = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($phaseSeqInstanceId, PHASE_SEQUENCE))['value'];
        $curPhase = '';
        $curSequence = '';
        $prevPhase = '';
        $prevPhaseDeal = '';
        /* foreach ($operationPhase as $key => $value) {
          if($dealPhase == $value['Phase']){
          $curPhase = $key;
          $curSequence = $value['Sequence'];
          break;
          }
          } */
        $cond = 1;
        while (list($key, $value) = each($operationPhase)) {
            if ($dealPhase == $value['Phase'] && $cond) {
                $curPhase = $key;
                $curSequence = $value['Sequence'];
                reset($operationPhase); // start again
                $cond = 0;
            }
            if ($curSequence != '' && ($curSequence - 1) == $value['Sequence']) {
                $prevPhase = $key;
                $prevPhaseDeal = $value['Phase'];
                break;
            }
        }
        //return array($instance_node_id,$curPhase);
        $dealPhaseInstanceId = $this->table->getInstanceIdByTwoValue(array('value1' => $instance_node_id, 'value2' => $curPhase))[0]['node_instance_id'];

        //return array($curPhase,$prevPhase,$prevPhaseDeal,$reason);
        //prev role and user

        $phaseSeqArr = explode(',', $dealPhaseSeq);
        $_arrKey = array_search($login_role_id, $phaseSeqArr);
        $prevRole = $phaseSeqArr[$_arrKey - 1];

        //Update Deal Phase Class


        $dataArray['node_instance_id'] = $dealPhaseInstanceId;
        $dataArray['node_class_id'] = PHASE_CLASS_ID;
        $dataArray['node_class_property_id'] = array(PHASE_DEAL_P_ID, PHASE_PHASE_P_ID, PHASE_ROLE_P_ID, PHASE_STATUS_P_ID);
        $dataArray['value'] = array($instance_node_id, $prevPhase, $prevRole, 'Completed');
        $dataArray['is_email'] = 'N';
        $dataArray['status'] = 'P';
        //return $dataArray;
        $this->setStructure($dataArray, 'Instance');
        //update  Phase property of Deal class

        $dealData['node_instance_id'] = $deal_instance_id;
        $dealData['node_class_property_id'] = DEAL_PHASE_PROPERTY_ID;
        $dealData['value'] = $prevPhaseDeal;
        //return $dealData;
        $this->table->updateDealPhase($dealData);

        // Update Mapping Deal Operation class

        $allOpeArray = $this->table->getInstanceListOfParticulerClass(OPERATION_CLASS_ID, 'class', 'node_id');
        $finalOperation = '';
        $mappingRoleActorNid = '';
        foreach ($allOpeArray as $key => $value) {
            if (strtolower($value['Final Operation']) == 'yes' && $value['Role'] == $prevRole) {
                $finalOperation = $key;
                break;
            }
        }

        $mappingRoleActor = $this->table->getInstanceListOfParticulerClass(MAPPING_ROLE_ACTOR_CLASS_ID, 'class', 'node_id');

        $prevUser = '';

        foreach ($mappingRoleActor as $key => $value) {
            if ($value['Role'] == $prevRole && $value['Deal'] == $instance_node_id) {
                $prevUser = $value['Actor'];
                break;
            }
        }
        foreach ($mappingRoleActor as $key => $value) {
            if ($value['Role'] == $prevRole && $value['Actor'] == $prevUser && $value['Deal'] == $instance_node_id) {
                $mappingRoleActorNid = $key;
                break;
            }
        }
        $mappingDealOp = $this->table->getInstanceListOfParticulerClass(MAPPING_DEAL_OPERATION_CLASS_ID, 'class', 'node_id');

        $opCompleted = 0;
        $opCompletedNid = '';
        foreach ($mappingDealOp as $key => $value) {
            if ($value['Mapping_Role_Actor'] == $mappingRoleActorNid && $value['Operation'] == $finalOperation && $value['Status'] == 'Completed') {
                $opCompleted = 1;
                $opCompletedNid = $key;
                break;
            }
        }
        if ($opCompleted) {
            $opCompltedInstanceId = $this->table->getTableCols(array('node_instance_id'), 'node-instance', array('node_id'), array($opCompletedNid))['node_instance_id'];
            $opCompltedIPD = $this->table->getTableCols(array('node_instance_property_id'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($opCompltedInstanceId, MAPPING_DEAL_OP_STATUS))['node_instance_property_id'];
            $this->table->updateOperationStatus(array('mode' => 'update', 'value' => 'Incompleted', 'nipid' => $opCompltedIPD));
        }



        $propertyValue[0] = $login_role_id; //node_id of login user's role
        $propertyValue[1] = $login_user_id; //node_id of login user
        $propertyValue[2] = $curPhase;
        $propertyValue[3] = $prevRole;
        $propertyValue[4] = $prevUser;
        $propertyValue[5] = $prevPhase;
        $propertyValue[6] = date('Y-m-d H:i:s');
        $propertyValue[7] = $reason;
        $nodeType = 2;
        $this->table->createInstancePropertySpreadSheet($childKeyPropertyID, $propertyValue, $deal_reject_instance_id, $nodeType);
        $this->table->createRelation($instance_node_id, array($deal_reject_node_instance_id));
        return 1;
    }

    public function setLastVisitedOperation($post) {
        return $this->table->setLastVisitedOperation($post);
    }

    public function getDealRejectionHistory($data) {
        return $this->table->getDealRejectionHistory($data);
    }

//******************************START******************RESET PASSWORD CODE****************************************************************
// ADDED BY- GAURAV DUTT PANCHAL
// DATE- 30 NOV, 2016
    /*
     * CHECK USER EXIST OR NOT 
     * PARAMS: EMAIL ID
     */
    public function isEmailExist($email_address, $email_property_id) {
        return $this->table->isEmailExist($email_address, $email_property_id);
    }

    public function getFieldDataBy($individual_instance_node_id) {
        return $this->table->getFieldDataBy($individual_instance_node_id);
    }

    public function getDataOfInstanceTitle($node_id) {
        return $this->table->getDataOfInstanceTitle($node_id);
    }

    public function getSingleClassInstanceValue($post) {
        return $this->table->getSingleClassInstanceValue($post);
    }

    public function getOperationPermission($data = array()) {

        $_dealInstanceId = $data['deal_instance_id'];

        $_nodeId = $data['node_id'];
        $_roleId = $data['role_id'];
        $_permission = strtolower($data['permission']);
        $subclassArr = $conditionArr = array();
        $conditionArr[$_nodeId] = $this->table->getInstanceListOfParticulerClass(MANAGE_CONTROL_CLASS_ID, 'class', 'node_id')[$_nodeId];
        $_relationArr = $this->table->getNodeXOfParticulerClassWithoutClass($_nodeId, 'node_y_id', 'node_x_id');

        foreach ($_relationArr as $key => $value) {
            if ($value['node_class_id'] == OPERATION_ROLE_CONTROL) {
                $conditionArr[$value['node_x_id']] = $this->table->getInstanceListOfParticulerClass($value['node_x_id'], 'node', 'node_id')[$value['node_x_id']];
            }
            if ($value['node_class_id'] == PASS_DEAL) {
                $subclassArr[$value['node_x_id']] = $this->table->getInstanceListOfParticulerClass($value['node_x_id'], 'node', 'node_id')[$value['node_x_id']];
                $_passDealRelationArr = $this->table->getNodeXOfParticulerClassWithoutClass($value['node_x_id'], 'node_y_id', 'node_x_id');
                foreach ($_passDealRelationArr as $key1 => $value1) {
                    $subclassArr[$value['node_x_id']]['subclass'][$value1['node_x_id']] = $this->table->getInstanceListOfParticulerClass($value1['node_x_id'], 'node', 'node_id')[$value1['node_x_id']];
                }
            }
        }
        if ($_permission == 'condition') {
            foreach ($conditionArr as $key => $value) {
                if ($value['Role'] == $_roleId) {
                    return array_unique(explode(CHECKBOX_SEPERATOR, $value['Action']));
                }
            }
        }
        if ($_permission == 'pass' || $_permission == 'common') {
            if ($_permission == 'common') {
                foreach ($subclassArr as $key => $value) {
                    if ($value['Role'] == $_roleId) {
                        return explode(',', $value['Common Operation']);
                    }
                }
            }
            if ($_permission == 'pass') {
                $_passRoleArr = $_conditionsArr = array();
                foreach ($subclassArr as $key => $value) {
                    $_conditionStr = '';
                    foreach ($value['subclass'] as $subKey => $subValue) {
                        if ($subValue['Property Name'] != '') {
                            $_dealPid = $this->table->getTableCols(array('node_class_property_id'), 'node-class-property', array('caption', 'node_class_id'), array($subValue['Property Name'], DEAL_CLASS))['node_class_property_id'];
                            $_propertyValue = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($_dealInstanceId, $_dealPid))['value'];
                            $_condition = $this->getCondition($subValue['Condition']);
                            $_andCondition = $this->getCondition($subValue['Add Next Condition']);
                            $_conditionStr .= '(' . $_propertyValue . ' ' . $_condition . ' ' . $subValue['Value'] . ') ' . $_andCondition . ' ';
                            if ($_andCondition == '') {
                                break;
                            }
                        }
                    }
                    if ($_condition == '') {
                        $_passRoleArr[] = $value['Role'];
                        break;
                    }
                    $_conditionsArr[$value['Role']] = $_conditionStr;
                }
                foreach ($_conditionsArr as $_conditionsKey => $_conditionsValue) {
                    if (eval('return ' . $_conditionsValue . ';')) {
                        $_passRoleArr[] = $_conditionsKey;
                    }
                }
                //return array($_conditionsArr,$_passRoleArr);
                return $_passRoleArr;
            }
        }
        return array();
    }

    function getCondition($_condition = '') {
        switch ($_condition) {
            case 'Greater Then':
                return '>';
                break;
            case 'Less Then':
                return '<';
                break;
            case 'Equal To':
                return '==';
                break;
            case 'Not Equal To':
                return '!=';
                break;
            case 'AND':
                return '&&';
                break;
            case 'OR':
                return '||';
                break;
            case 'None':
                return '';
                break;
            default:
                break;
        }
    }

    public function getmapOperationFormData($post) {
        return $this->table->getmapOperationFormData($post['property_key'], $post['fld_property'], $post['insId']);
    }

    function getCurrentControl($instanceNodeId) {


        //*****************GET control_version_id deal ids***************
        $dealDeailsRes = $this->table->getDealDetails($instanceNodeId);
        $dealDeails = $dealDeailsRes;
        $instanceId = $dealDeails['node_instance_id'];

        //*****************GET deal_creator user ids***************
        $dealOwnerRes = $this->table->getNodeXOfParticulerClass($instanceNodeId, 'node_y_id', 'node_x_id', DEAL_CREATOR_CLASS_ID);
        $dealOwner = $dealOwnerRes;

        //GET DEAL OWNER DETAILS
        if (is_array($dealOwner) && intval(current($dealOwner)['node_x_id']) > 0) {
            $dealOwnerResVal = $this->table->getInstanceListOfParticulerClass(current($dealOwner)['node_x_id'], 'node', 'node_id');
            $dealOwnerResArr = $dealOwnerResVal;
            //$dealOwnerRes  = current($dealOwnerResArr['data']);
            $dealOwnerRes  = current($dealOwnerResArr);
            
        }
        
        //*****************GET DEAL DETAILS IN PASS BY ROLE CLASS ARRAY***************
        $passByRoleArrRes = $this->table->checkDealInPassedByRoles($instanceId, $instanceNodeId);
        $passByRoleArr = $passByRoleArrRes;


        //*****************GET control_version_id deal ids***************
        $checkInstanceNodeId = $passByRoleArr['deal'];
        $controlVersionId = $dealDeails['control_version_id'];
        $toRoleId = $passByRoleArr['from_to'];
        if ($toRoleId == '') {
            $toRoleId = $dealOwnerRes['Role NID'];
        }

        $passDealRes = $this->table->checkInPassedDealsByRolesCls($controlVersionId, $toRoleId);
        return $passDealRes;
    }


        

    public function assignRoleOfRa($post) {
        return $this->table->assignRoleOfRa($post);
    }

    public function updateDealStatus($data = array()) {
        $_roleId = $data['role_id']; //archive
        $_dealInstanceId = $data['deal_instance_id'];

        $_roleArr = array(BUSINESS_MANAGER, REVENUE_ACCOUNTANT, REVENUE_MANAGER, CONTROLLER, DIRECTOR,'archive');
        if (!in_array($_roleId, $_roleArr)) {
            //return 1;
        }
        
        
        
        // Get deal fi and stock number
        //$_dealFiQuoteNo = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($_dealInstanceId, DEAL_FI_QUOTE_PID))['value'];
        //$_dealStockNo = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($_dealInstanceId, DEAL_STOCK_PID))['value'];
        
        
        //$_dealExists            = json_decode($builderApiObj->getTableCols(array('value'), 'node-instance-property', array('node_instance_id'), array($id_detail_instance_id, DEAL_EXISTS_PID)), TRUE)['value'];
        $_IsQuoteOrDeal = $_StatusCode = $_dealExists = '';
        $_dealExists = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id','node_class_property_id'), array($_dealInstanceId, DEAL_EXISTS_PID))['value'];
        
        
        

        // get status code 
        $sub['y_instance_node_id'] = $this->table->getTableCols(array('node_id'), 'node-instance', array('node_instance_id'), array($_dealInstanceId))['node_id'];
        $sub['class_id'] = OPERATION_PROPERTY_MAP_DEAL_CLASS_ID;
        $subData = $this->table->getInstanceIdOfSubClass($sub);
        $dealInstancesArray = array(); 
        if ($subData != '') {
            $instanceInfo = $this->table->getInstanceListOfParticulerClass($subData, 'instance', 'node_id');
            if (count($instanceInfo) > 0) {
                foreach (current($instanceInfo) as $key => $value) {
                    $temp = explode('~$~', $value);
                    $dealInstancesArray[$temp[0]] = $temp[1];
                }
            }
        }
        //$dealInstancesArray['641371'] = 'puidata/page_plugin/api_files/boat_127465_CW.txt';
        //$dealInstancesArray['796488'] = 'puidata/page_plugin/api_files/finance_90097_CW.txt';
        $temp   = explode('.',$dealInstancesArray['641371']);
        
        if($temp[1] == 'txt'){
            
            $awsObj                 = $data['awsObj'];
            $stockData              = json_decode($awsObj->getFileData($dealInstancesArray['641371'])['data'],TRUE)['Record'];
            $_StatusCode            = $stockData['StatusCode'];
        }else{
            $stockData = $this->table->getInstanceListOfParticulerClass(UNIT_CLASS_ID, 'class', 'node_id');
            foreach ($stockData as $key => $value) {
                if ($value['StockNo'] == intval($_dealStockNo)) {
                    $_StatusCode = $value['StatusCode'];
                    break;
                }
            }
        }
        
        $temp   = explode('.',$dealInstancesArray['796488']);
        if($temp[1] == 'txt'){
            $awsObj                 = $data['awsObj'];
            $fiData                 = json_decode($awsObj->getFileData($dealInstancesArray['796488'])['data'],TRUE)['Record'];
            $_IsQuoteOrDeal         = $fiData['IsQuoteOrDeal'];
        }else{
            $fiData = $this->table->getInstanceListOfParticulerClass(FINANCE_DEALS_CLASS_ID, 'class', 'node_id');
            foreach ($fiData as $key => $value) {
                if (intval($value['QuoteNo']) == intval($_dealFiQuoteNo)) {
                    $_IsQuoteOrDeal = $value['IsQuoteOrDeal'];
                    break;
                }
            }
        }
        
        if ($_dealExists == '' || $_dealExists == 'N') {
            if ($_IsQuoteOrDeal == 'D') {
                $_dealExists        = 'Y';
            } else {
                $_dealExists        = 'N';
            }
        }
        
        $_dealStatus = '';
        if ($_roleId == BUSINESS_MANAGER) {
            $_dealStatus = 'None';
            $this->updateDealSubStatus($_dealInstanceId, $_roleId);
        }
        if (/*$_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && $_StatusCode == 'FS' &&*/ strtolower($_roleId) == 'archive') {// as per discussion with animesh , shanti and arvind, we have comment thsi line(03-01-2017)
            $_dealStatus = 'Archive';
            $this->updateDealSubStatus($_dealInstanceId,'','');
        }elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && ($_StatusCode == 'SA' || $_StatusCode == 'SO') && $_roleId == BUSINESS_MANAGER) { //correct
            $_dealStatus = 'Capped';
            $this->updateDealSubStatus($_dealInstanceId,'','');
        } elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && $_StatusCode == 'FS' && ($_roleId == BUSINESS_MANAGER || $_roleId == REVENUE_MANAGER || $_roleId == CONTROLLER || $_roleId == DIRECTOR)) {
            $_dealStatus = 'Final Sale';
            $this->updateDealSubStatus($_dealInstanceId,$_roleId,'');
        } else if ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && ($_StatusCode == 'SA' || $_StatusCode == 'SO' || $_StatusCode == 'FS') && $_roleId == REVENUE_ACCOUNTANT) {
            $_dealStatus = 'Posting';
            $this->updateDealSubStatus($_dealInstanceId, $_roleId);
        } else if ($_dealExists == 'N' && ($_StatusCode == 'A' || $_StatusCode == 'SA' || $_StatusCode == 'O' || $_StatusCode == 'SO' || $_StatusCode == 'FS') && $_roleId == BUSINESS_MANAGER) {
            $_dealStatus = 'Sales';
            $this->updateDealSubStatus($_dealInstanceId,'','');
        } else if ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'Q' && ($_StatusCode == 'A' || $_StatusCode == 'SA' || $_StatusCode == 'O' || $_StatusCode == 'SO' || $_StatusCode == 'FS') && $_roleId == BUSINESS_MANAGER) {
            $_dealStatus = 'Cancelled'; //correct  
            $this->updateDealSubStatus($_dealInstanceId,'','');
        }

    
        /*if ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && ($_StatusCode == 'SA' || $_StatusCode == 'SO' || $_StatusCode == 'FS') && $_roleId == REVENUE_ACCOUNTANT) {
            $_dealStatus = 'Posting';
            $this->updateDealSubStatus($_dealInstanceId, $_roleId);
        } elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && $_StatusCode == 'FS' && strtolower($_roleId) == 'archive') {// as per discussion with animesh , shanti and arvind, we have comment thsi line(03-01-2017)
            $this->updateDealSubStatus($_dealInstanceId,'','');
           $_dealStatus = 'Archive';
        } elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && $_StatusCode == 'FS' && ($_roleId == REVENUE_MANAGER || $_roleId == CONTROLLER || $_roleId == DIRECTOR || $_roleId == BUSINESS_MANAGER)) {
            $_dealStatus = 'Final Sale';
            $this->updateDealSubStatus($_dealInstanceId, $_roleId);
        } elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'D' && ($_StatusCode == 'SA' || $_StatusCode == 'SO') && $_roleId == BUSINESS_MANAGER) {
            $this->updateDealSubStatus($_dealInstanceId,'','');
            $_dealStatus = 'Capped';
        } elseif ($_dealExists == 'Y' && $_IsQuoteOrDeal == 'Q' && ($_StatusCode == 'A' || $_StatusCode == 'SA' || $_StatusCode == 'O' || $_StatusCode == 'SO' || $_StatusCode == 'FS') && $_roleId == BUSINESS_MANAGER) {
            $this->updateDealSubStatus($_dealInstanceId,'','');
            $_dealStatus = 'Cancelled';
        }*/
        $_statusData['node_instance_id'] = $_dealInstanceId;
        $_statusData['node_class_property_id'] = DEAL_STATUS_PID;
        $_statusData['value'] = $_dealStatus;
        if($_dealStatus !=''){
            $this->table->updateDealPhase($_statusData);
        }
        return array('key'=>DEAL_STATUS_PID,'value'=>$_dealStatus,'dealExists'=>$_dealExists,'role_id'=>$_roleId,'isQuoteorDeal'=>$_IsQuoteOrDeal,'statusCode'=>$_StatusCode);
    }
    public function updateDealSubStatus($_dealInstanceId = '', $_roleId = '', $_dealStatus = '') {
        
        //return $_dealInstanceId."--".$_roleId."---".$_dealStatus;die;
        if ($_roleId == REVENUE_MANAGER) {
            $_dealStatus = 'Revenue Manager Review';
        } elseif ($_roleId == CONTROLLER) {
            $_dealStatus = 'Controller Review';
        } elseif ($_roleId == DIRECTOR) {
            $_dealStatus = 'Director Review';
        }elseif($_roleId == REVENUE_ACCOUNTANT){
            $_dealRoleActor = $this->table->getInstanceListOfParticulerClass(MAPPING_ROLE_ACTOR_CLASS_ID , 'class', 'node_id');
            $_raAssign = 0;
            $dealInstanceNodeId = $this->table->getTableCols(array('node_id'), 'node-instance', array('node_instance_id'), array($_dealInstanceId))['node_id'];
            foreach ($_dealRoleActor as $_key => $_value) {
                if ($_value['Role'] == $_roleId && $_value['Deal'] == $dealInstanceNodeId && $_value['Actor'] != '') {
                    $_raAssign = 1;
                    break;
                }
            }
            if($_dealStatus == ''){
                $_dealStatus = 'Unassigned';
                if ($_raAssign) {
                    $_dealStatus = 'In Progress';
                }
            }
        }elseif($_roleId == BUSINESS_MANAGER){
            $_dealStatus = '';
        } else {
            $_dealStatus = $_dealStatus;
        }

        $_statusData['node_instance_id'] = $_dealInstanceId;
        $_statusData['node_class_property_id'] = DEAL_SUB_STATUS_PID;
        $_statusData['value'] = $_dealStatus;
        
        $this->table->updateDealPhase($_statusData);
        return $_dealStatus;
    }

    public function updateDealAssignedRAName($data) {
        return $this->table->updateDealAssignedRAName($data);
    }


    public function getClassNidFromView($node_id) {
        return $this->table->getClassNidFromView($node_id);
    }

    
    public function getSingleValueOfAllInstanceByClass($data = array()) {
        return $this->table->getSingleValueOfAllInstanceByClass($data);
    }

    public function getClassStructureWithHirerchy($node_y_class_id) {
       return $this->table->getClassStructureWithHirerchy($node_y_class_id);
    }

    public function getRAActorName($post) {
        return $this->table->getRAActorName($post);
    }
    public function getInstancePropertyValue($post) {
        return $this->table->getInstancePropertyValue($post);
    }

    /**
     * Function to handle AWS S3 Files
     * Created by: Amit Malakar
     * Date: 06-Jan-17
     * @param $data
     * @return mixed
     */
    public function awsS3File($data) {
        $awsS3Obj = new AwsS3();
        switch ($data['mode']) {
            case 'get':
                $fileName = $data['filename'];
                $result   = $awsS3Obj->checkFull($data);//getFileLink($fileName);
                break;
            case 'list_bucket':
                $result = $awsS3Obj->getBucketLists($data);
                break;

        }
        return $result;
    }

    public function locationRoleForStore($post) {
        return $this->table->locationRoleForStore($post);
    }

    /**
     * Created by: Divya Rajput
     * Date: 06-Feb-2017
     * Purpose: To fetch All Operation List for Super Admin on Behalf of Deal Id
     * @param $post
     * @return Array
     */
    public function getOperationList($post) {
        return $this->table->getOperationList($post);
    }

    public function getOperationMenuCount($data = array()) {
        return $this->table->getOperationMenuCount($data);
    }

    public function searchPropertyValueInAllClassInstances($post) {
        return $this->table->searchPropertyValueInAllClassInstances($post);
    }

    
    public function getCourseClassData($data = array()) {
        return $this->table->getCourseClassData($data);
    }
    

    /**
     * Created by: Amit Malakar
     * Date: 21-Feb-2017
     * To get pass by deal data (right sidebar options) for Deal listing
     * @param $post
     * @return array
     */
    public function getPassByDealData($post) {
        $result                   = array();
        $result['instanceNodeId'] = $instanceNodeId = $this->table->getInstanceNodeId(DEAL_CLASS, $post['deal_node_instance_id']);
        //echo $deal_node_instance_id.'ku';
        $result['archivedStatus'] = $archivedStatus = $this->table->checkInArchivedStatus($instanceNodeId);

        if ((int)$archivedStatus == 0) {//deal not archieved yet
            //*****************GET control_version_id deal ids***************
            $result['dealDeails'] = $dealDeails = $this->table->getDealDetails($instanceNodeId);

            //*****************GET deal_creator user ids***************
            $result['dealOwner'] = $dealOwner = $this->table->getNodeXOfParticulerClass(intval($instanceNodeId), 'node_y_id', 'node_x_id', DEAL_CREATOR_CLASS_ID);

            //GET DEAL OWNER DETAILS
            if (is_array($dealOwner) && intval(current($dealOwner)['node_x_id']) > 0) {
                $dealOwnerResArr        = $this->table->getInstanceListOfParticulerClass(current($dealOwner)['node_x_id'], 'node', 'node_id');
                $result['dealOwnerRes'] = $dealOwnerRes = current($dealOwnerResArr);
            }

            //*****************GET DEAL DETAILS IN PASS BY ROLE CLASS ARRAY***************
            $instanceId = $dealDeails['node_instance_id'];

            // *** OPTIMIZED - 240 ms ->  ms ***
            //Get Deal Size
            $result['dealSize'] = $dealSize = $this->table->getDealSize($instanceId);

            // *** OPTIMIZED - 200 ms ->  43ms ***
            $result['passByRoleArr'] = $passByRoleArr = $this->table->checkDealInPassedByRoles($instanceId, $instanceNodeId);

            //*****************GET control_version_id deal ids***************
            $checkInstanceNodeId = $passByRoleArr['deal'];
            $controlVersionId    = $dealDeails['control_version_id'];
            $toRoleId            = $passByRoleArr['from_to'];
            if ($toRoleId == '') {
                $toRoleId = $dealOwnerRes['Role NID'];
            }

            $result['passDealArr'] = $passDealArr = $this->table->checkInPassedDealsByRolesCls($controlVersionId, $toRoleId);

            $dealStatus                = (int)$dealDeails['status'];
            $loginUserId               = (int)trim($post['login_user_id']);
            $dealCreatorId             = (int)trim($dealOwnerRes['User NID']);
            $loginRoleId               = (int)trim($post['login_role_id']);
            $dealControllerId          = (int)trim($passByRoleArr['from_to']);
            $activeManageControlNodeId = (int)trim($passDealArr['active_node_id']);
            //for published deal
            $passDealCls     = 'inactive';
            $condForPassDeal = 'cond-0';

            $data['node_id']          = $activeManageControlNodeId;
            $data['deal_instance_id'] = $instanceId;
            $data['role_id']          = $loginRoleId;
            $data['permission']       = 'pass';

            $result['controlRoleArr']   = $controlRoleArr = $this->getOperationPermission($data);
            $result['controlRoleCount'] = $controlRoleCount = count($controlRoleArr);

            $roleArr = array();
            if ($controlRoleCount > 0) {
                $i = 0;
                foreach ($controlRoleArr as $roleId) {
                    $roleNameArr               = $this->table->getRoleName($roleId);
                    $roleArr[$i]['role_id']    = $roleId;
                    $roleArr[$i]['role_title'] = $roleNameArr[$roleId]['Title'];
                    $i++;
                }
            }
            $result['roleArr']  = $roleArr;
            $result['raOnDeal'] = $raOnDeal = $this->table->getActorWithRoleAndDeal($instanceNodeId);

            $raActorId   = (int)$raOnDeal[ROLE_REVENUE_ACCOUNTANT]['actor'];
            $bmActorId   = (int)$raOnDeal[ROLE_BM]['actor'];
            $rmActorId   = (int)$raOnDeal[ROLE_REVENUE_MANAGER]['actor'];
            $ctrlActorId = (int)$raOnDeal[ROLE_CONTROLLER]['actor'];
            $dirActorId  = (int)$raOnDeal[ROLE_DIRECTOR]['actor'];

            switch ($controlRoleCount) {
                case '0':
                    $passRoleFlag = 'pass-to-deal-creator';
                    break;
                case '1':
                    $passRoleFlag = 'pass-to-single';
                    break;
                default :
                    $passRoleFlag = 'pass-to-multiple';
                    break;
            }

            $label        = 'Pass the Deal';
            $reject_label = 'Return Deal';
            $roleMsgArr   = array(
                ROLE_TEAM_SUPPORT       => array('role_name' => 'Team Support', 'text' => '', 'label' => 'Pass the Deal', 'reject_label' => 'Return Deal'),
                ROLE_SALES_CONSULTANT   => array('role_name' => 'Sales Consultant', 'text' => '', 'label' => 'Pass the Deal', 'reject_label' => 'Return Deal'),
                ROLE_SELLER             => array('role_name' => 'Seller', 'text' => '', 'label' => 'Pass the Deal', 'reject_label' => 'Return Deal'),
                ROLE_BUYER              => array('role_name' => 'Buyer', 'text' => '', 'label' => 'Pass the Deal', 'reject_label' => 'Return Deal'),
                ROLE_BM                 => array('role_name' => 'Business Manager', 'text' => 'Are you sure you want to request deal posting?', 'label' => 'Request Deal Posting', 'reject_label' => 'Return Deal'),
                ROLE_REVENUE_ACCOUNTANT => array('role_name' => 'Revenue Accountant', 'text' => 'Are you sure you want to mark the deal as posted?', 'label' => 'Deal Posted', 'reject_label' => 'Return to Business Manager'),
                ROLE_REVENUE_MANAGER    => array('role_name' => 'Revenue Manager', 'text' => 'Are you sure you want to mark the review as complete?', 'label' => 'Review Complete', 'reject_label' => 'Return to Revenue Accountant'),
                ROLE_CONTROLLER         => array('role_name' => 'Controller', 'text' => 'Are you sure you want to mark the review as complete?', 'label' => 'Review Complete', 'reject_label' => 'Return to Revenue Accountant'),
                ROLE_DIRECTOR           => array('role_name' => 'Director', 'text' => 'Are you sure want to mark the deal as final approved?', 'label' => 'Approved', 'reject_label' => 'Return to Revenue Accountant'),
            );

            $roleArrParamArr['pass_role_flag'] = $passRoleFlag;
            $roleArrParamArr['login_role_id']  = $loginRoleId;
            $roleArrParamArr['login_user_id']  = $loginUserId;
            if ($roleMsgArr[$loginRoleId]['text'] != '') {
                $label = $roleMsgArr[$loginRoleId]['label'];
            }
            $reject_label                             = $roleMsgArr[$loginRoleId]['reject_label'];
            $roleArrParamArr['confirm_msg']           = $roleMsgArr[$loginRoleId]['text'];
            $roleArrParamArr['deal_instance_node_id'] = $instanceNodeId;
            $roleArrParamArr['roles']                 = $roleArr;
            $roleArrParamArr['deal_status']           = $dealStatus;
            $roleArrParamArr['deal_size']             = $dealSize;
            $roleArrParamArr['status']                = $archivedStatus;
            $roleArrParamArr['deal_instance_id']      = $instanceId;
            $roleArrParamArr['bm_user_id']            = $bmActorId;
            $roleArrParamArr['ra_user_id']            = $raActorId;
            $roleArrParamArr['rm_user_id']            = $rmActorId;
            $roleArrParamArr['ctrl_user_id']          = $ctrlActorId;
            $roleArrParamArr['dir_user_id']           = $dirActorId;

            $roleArrParam  = htmlentities(json_encode($roleArrParamArr), ENT_QUOTES, 'UTF-8');
            $rejectDealCls = 'inactive';
            if ($dealStatus == 1) {
                $condForPassDeal = 'cond-1';
                //if login user and deal creator are same
                if ($loginUserId == $dealCreatorId) {

                    $condForPassDeal = 'cond-2';
                    if ($dealControllerId > 0) {
                        $condForPassDeal = 'cond-3';
                        // Now login user has control to pass the deal
                        if ($loginRoleId == $dealControllerId) {

                            if ($loginRoleId == ROLE_REVENUE_ACCOUNTANT && (int)$raActorId != (int)$loginUserId) {
                                $passDealCls     = 'inactive';
                                $rejectDealCls   = 'inactive';
                                $condForPassDeal = 'cond-4.1';
                            } else if ($loginRoleId == ROLE_BM && (int)$bmActorId != (int)$loginUserId) {
                                $passDealCls     = 'inactive';
                                $rejectDealCls   = 'inactive';
                                $condForPassDeal = 'cond-4.2';
                            } else if ($loginRoleId == ROLE_REVENUE_MANAGER && (int)$rmActorId != (int)$loginUserId) {
                                $passDealCls     = 'inactive';
                                $rejectDealCls   = 'inactive';
                                $condForPassDeal = 'cond-4.3';
                            } else if ($loginRoleId == ROLE_CONTROLLER && (int)$ctrlActorId != (int)$loginUserId) {
                                $passDealCls     = 'inactive';
                                $rejectDealCls   = 'inactive';
                                $condForPassDeal = 'cond-4.4';
                            } else if ($loginRoleId == ROLE_DIRECTOR && (int)$dirActorId != (int)$loginUserId) {
                                $passDealCls     = 'inactive';
                                $rejectDealCls   = 'inactive';
                                $condForPassDeal = 'cond-4.5';
                            } else {
                                $passDealCls     = '';
                                $rejectDealCls   = '';
                                $condForPassDeal = 'cond-4.6';
                            }

                            if ($loginRoleId == ROLE_BM) {
                                $rejectDealCls = 'inactive';
                            }
                        }
                    } else {
                        // Then deal is not passed to others role
                        // not deal creator has access to pass the deal
                        if ($loginRoleId == ROLE_BM) {
                            $passDealCls     = '';
                            $condForPassDeal = 'cond-5.1';
                        } else {
                            $passDealCls     = 'inactive';
                            $condForPassDeal = 'cond-5.2';
                        }

                    }
                } else {
                    $condForPassDeal = 'cond-6';
                    //if login user and deal creator are not same
                    if ($dealControllerId > 0) {
                        $condForPassDeal = 'cond-7';
                        // Now login user has control to pass the deal and RA assigned on this deal

                        if ($loginRoleId == $dealControllerId) {
                            $passDealCls     = '';
                            $rejectDealCls   = '';
                            $condForPassDeal = 'cond-8';
                        }
//                if (ROLE_REVENUE_ACCOUNTANT == (int) $loginRoleId) {
//                    if ((int) $raActorId != (int) $loginUserId) {
//                        $passDealCls = 'inactive';
//                        $rejectDealCls = 'inactive';
//                        $condForPassDeal = 'cond-9';
//                    }
//                }
                        if ($loginRoleId == ROLE_REVENUE_ACCOUNTANT && (int)$raActorId != (int)$loginUserId) {
                            $passDealCls     = 'inactive';
                            $rejectDealCls   = 'inactive';
                            $condForPassDeal = 'cond-9.1';
                        } else if ($loginRoleId == ROLE_BM && (int)$bmActorId != (int)$loginUserId) {
                            $passDealCls     = 'inactive';
                            $rejectDealCls   = 'inactive';
                            $condForPassDeal = 'cond-9.2';
                        } else if ($loginRoleId == ROLE_REVENUE_MANAGER && (int)$rmActorId != (int)$loginUserId) {
                            $passDealCls     = 'inactive';
                            $rejectDealCls   = 'inactive';
                            $condForPassDeal = 'cond-9.3';
                        } else if ($loginRoleId == ROLE_CONTROLLER && (int)$ctrlActorId != (int)$loginUserId) {
                            $passDealCls     = 'inactive';
                            $rejectDealCls   = 'inactive';
                            $condForPassDeal = 'cond-9.4';
                        } else if ($loginRoleId == ROLE_DIRECTOR && (int)$dirActorId != (int)$loginUserId) {
                            $passDealCls     = 'inactive';
                            $rejectDealCls   = 'inactive';
                            $condForPassDeal = 'cond-9.5';
                        }

                        if ($loginRoleId == ROLE_BM) {
                            $rejectDealCls = 'inactive';
                        }
                    }
                }
            }
            $_dealInstanceId = $post['deal_instance_id'];
            if ($loginRoleId == (int)ROLE_REVENUE_ACCOUNTANT && (int)$raActorId == (int)$loginUserId) {
                $_statusValue    = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($_dealInstanceId, DEAL_STATUS_PID));//, true)['value'];
                $_status         = $_statusValue['value'];
                $_subStatusValue = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($_dealInstanceId, DEAL_SUB_STATUS_PID));
                $_subStatus      = $_subStatusValue['value'];
                $onHoldDeal      = '<a href="#" data-placement = "left" class = "tooltip-item inactive"><i class = "prs-icon onHold"></i><br><span>On Hold</span></a>';
                if (/* $_status == 'Posting' && */ ($_subStatus == 'In Progress' /* || $_subStatus == 'Unassigned' */) && $toRoleId == ROLE_REVENUE_ACCOUNTANT) { //Posting
                    $result['onHoldDeal'] = $onHoldDeal = '<a href="#" onclick = "callOnholdContentAction(this);" data-placement = "left" class = "tooltip-item"><i class = "prs-icon onHold"></i><br><span>On Hold</span></a>';
                } else {
                    //$_dealInstanceNodeId  = json_decode($builderApiObj->getTableCols(array('node_id'), 'node-instance', array('node_instance_id'), array($_dealInstanceId)), true)['node_id'];
                    //$_controlRole = json_decode($builderApiObj->checkDealInPassedByRoles($instanceId, $_dealInstanceNodeId),TRUE);
                    if (trim($_subStatus) != '' && $_subStatus != 'In Progress' /* && $_subStatus != 'Unassigned' */ && $toRoleId == ROLE_REVENUE_ACCOUNTANT) {
                        $rejectDealCls = $passDealCls = ' inactive ';
                        $result['onHoldDeal'] = $onHoldDeal = '<a href="#" onclick = "restoreOnholdContentAction(this);" data-placement = "left" class = "tooltip-item"><i class = "prs-icon restore"></i><br><span>Restore</span></a>';
                    }
                }
            }
            // condition add for Super Admin Role
            if ($post['login_role_id'] == ROLE_SUPERADMIN) {
                $result['passDeal'] = $passDeal = '<a href="#" cond-val="cond-5" data-settings="" onclick="" data-placement="left" class="tooltip-item action-accept-invitation pass-deal-action other-then-deal inactive">
        <i class="prs-icon passdeal"></i><br><span>Pass the Deal</span></a>';
            } else {
                $result['passDeal'] = $passDeal = '<a href = "#" cond-val="' . $condForPassDeal . '" data-settings = "' . $roleArrParam . '" onclick = "confirmCompleteOperation(this);" data-placement = "left" class = "tooltip-item action-accept-invitation pass-deal-action other-then-deal ' . $passDealCls . '  ">
            <i class = "prs-icon passdeal"></i><br><span>' . $label . '</span></a>';
            }

            //******************************END******************FOR CONTROL MANAGEMENT CLASS****************************************************************
            //******************************Reject Deal Start******************************
            // condition add for Super Admin Role
            if ($post['login_role_id'] == ROLE_SUPERADMIN) {
                $result['rejectDeal'] = $rejectDeal = '<a href="#" data-placement="left" class="tooltip-item return-deal-action rejectJs other-then-deal inactive" onclick="#"><i class="prs-icon reject"></i><br><span>Return Deal</span></a>';
            } else {
                $result['rejectDeal'] = $rejectDeal = '<a href="#" data-placement="left" class="tooltip-item return-deal-action rejectJs other-then-deal ' . $rejectDealCls . '" onclick="confirmCompleteOperation(this,' . $post['deal_node_id'] . ',' . $post['deal_node_instance_id'] . ')"><i class="prs-icon reject"></i><br><span>' . $reject_label . '</span></a>';
            }            
        }
        return $result;
    }
    
    
    /**
    * Created By: Ben, Divya
    * Date: 20-Feb-2017
    * @Purpose : Get Operations Form Data
    * @param $_data : Array
    * @return array $_operationDetailsArr
    */
    public function getOperationFormData($_data = array()){
        $_data = $_data;
        $deal_node_id = $_data['deal_node_id'];
        $_permissionRoleId = $_data['deal_user_role_id'];
        //assign super admin role id
        $super_admin_role_id = $_data['super_admin_role_id'];
        $_operationDetailsArr = $_loginData = array();
        
        $_operationDetailsArr['formData'] = $this->table->getFormStructure($_data['view_instance_id']);
        
        $roleArray = $this->table->getActorWithRoleAndDeal($_data['deal_node_id']);
        foreach ($roleArray as $rolekey => $rolevalue) {
            $post['deal_node_instance_id'] = $_data['deal_node_id'];
            $post['deal_user_role_node_id'] = $rolevalue['role'];
            $post['login_user_id'] = $rolevalue['actor'];
            
            $mapping['mappingRoleActorInstanceId'] = $this->table->checkMappingDealOperationNodeID($post);
            $mapping['operation_id'] = $_data['operation_node_id'];
            
            $returnArray = $this->table->getDealOperationFormId($mapping);
            if ($returnArray['Form'] != "") {
                $_data['login_user_id'] = $_loginData['login_user_id'] = $rolevalue['actor'];
                $_data['deal_user_role_id'] = $_loginData['deal_user_role_id'] = $rolevalue['role'];
                break;
            }
        }
        //will remove below line when code will gone on qa
        //$_operationDetailsArr['login_user'] = $_loginData;
        
        
        $sub['y_instance_node_id'] = $_data['deal_node_id'];
        $sub['class_id'] = OPERATION_PROPERTY_MAP_DEAL_CLASS_ID;
        $subData = $this->table->getInstanceIdOfSubClass($sub);
        if ($subData != '') {
            $instanceInfo = $this->table->getInstanceListOfParticulerClass($subData, 'instance', 'node_id');
            if (count($instanceInfo) > 0) {
                foreach (current($instanceInfo) as $key => $value) {
                    $temp = explode('~$~', $value);
                    $dealInstancesArray[$temp[0]] = $temp[1];
                }
            }
            $_operationDetailsArr['dealInstancesArray'] = $dealInstancesArray;
        }
        
        $mappingDealOp['deal_node_instance_id'] = $deal_node_id;
        $mappingDealOp['deal_user_role_node_id'] = $_data['deal_user_role_id'];
        $mappingDealOp['login_user_id'] = $_data['login_user_id'];
        
        $_operationDetailsArr['mappingRoleActorInstanceId'] = $this->table->checkMappingDealOperationNodeID($mappingDealOp);
        
        $mapping['mappingRoleActorInstanceId'] = $_operationDetailsArr['mappingRoleActorInstanceId'];
        $mapping['operation_id'] = $_data['operation_node_id'];
        $_returnArray = $this->table->getDealOperationFormId($mapping);
        $_operationDetailsArr['returnArray'] = $_returnArray;
        if($_data['document_node_id']){
            if ($_returnArray['Document'] != "" && $_returnArray['Document'] != 'N/A') {
                $_doc['document_node_id'] = $_returnArray['Document'];
            } else {
                $_doc['document_node_id'] = $_data['document_node_id'];
            }
            $_doc['deal_instance_node_id'] = $deal_node_id;
            $documentData = $this->table->getDocumentData($_doc);
            $_operationDetailsArr['documentData'] = $documentData;
        }

        $_operationDetailsArr['classNodeId'] = $this->table->getClassNidFromView($_data['view_instance_id']);        
        
        $flag = 0;
        if ($super_admin_role_id != ROLE_SUPERADMIN) {
            $_operationDetailsArr['mappingroleData'] = $this->table->getInstanceListOfParticulerClass(MAPPING_ROLE_ACTOR_CLASS_ID, 'class', 'node_id');
        
            if (count($_loginData)) {
                $_data['login_user_id']      = $_loginData['login_user_id'];
                $_data['deal_user_role_id']  = $_loginData['deal_user_role_id'];
            }

            foreach ($_operationDetailsArr['mappingroleData'] as $key => $value) {
                if ((int) trim($value['Role']) == (int) trim($_data['deal_user_role_id']) && (int) trim($value['Actor']) == (int) trim($_data['login_user_id']) && (int) trim($value['Deal']) == (int) trim($deal_node_id)) {
                    $flag = 1;
                    break;
                }
            }
        }
        $_operationDetailsArr['flag'] = $flag;
        
        //Control Permission
        $arr = array();
        if($flag == 1){
            $archivedStatusRes = $this->table->checkInArchivedStatus($deal_node_id);
            if ((int) $archivedStatusRes == 1) {//deal archieved
                $_operationDetailsArr['archivedStatus'] = $arr;
            }else{
                $control['node_id'] = $this->getCurrentControl($deal_node_id)['active_node_id'];
                $control['role_id'] = $_permissionRoleId;
                $control['permission'] = 'condition';
                $_operationDetailsArr['archivedStatus'] = $this->getOperationPermission($control);
            }
        }else{
            $_operationDetailsArr['archivedStatus'] = $arr;
        }
        
        return $_operationDetailsArr;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 24-Feb-2017
    * @Purpose : Get Mapped Instance Value of a class
    * @param $post : Array
    * @return array
    */
    public function getMappedClassInstanceValuewithArray($post) {
        $tempArr = array();
        foreach ($post as $key => $value) {
            $d = $this->table->getSingleClassInstanceValue($value);
            foreach ($d as $key1 => $val1) {
                $tempArr[$key1] = $val1;
            }
        }
        return $tempArr;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 24-Feb-2017
    * @Purpose : Get Document Detail Data
    * @param $data : Array
    * @return array
    */
    public function getDetailDocumentData($data) {
        $documentClassNodeId = $data['documentClassNodeId'];
        $return_arr = $data['return_arr'];
        
        $mapped_field_arr = array();
        foreach ($return_arr as $key => $arr) {
            $form_field_node_id = explode('~$~', $key);
            if ($form_field_node_id[0] == $documentClassNodeId) {
                $mapped_field_arr[$form_field_node_id[1]] = $arr;
            }
        }
        
        if (count($mapped_field_arr) > 0) {
            $node_class_id = $this->table->getTableCols(array('node_class_id'), 'node-class', 'node_id', $documentClassNodeId)['node_class_id'];
            $result = $this->table->getClassStructureWithHirerchy($node_class_id);
            $updated_prop_arr = array();
            foreach ($mapped_field_arr as $indexKey => $indexVal) {
                $propAray = explode('>', $indexKey);
                if (isset($result['Properties'][$propAray[0]][$propAray[1]])) {
                    $propArray[] = $result['Properties'][$propAray[0]][$propAray[1]];
                    $propValArray[] = $indexVal;
                    $updated_prop_arr[$result['Properties'][$propAray[0]][$propAray[1]]] = $indexVal;
                }
            }
        }
        return $updated_prop_arr;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 24-Feb-2017
    * @Purpose : Mapped Instance of a Particular Class
    * @param $data : Array
    * @return array
    */
    public function getMappingInstanceListOfParticulerClass($data = array()){
        $particulerDealArray = array();
        foreach ($data as $key => $value) {
            $temp                                       = explode('.',$value);
            if($temp[1] != 'txt')
            {   
                $dealData = $this->table->getInstanceListOfParticulerClass($value, 'node', 'all');
                $particulerDealArray[$key]                  = $dealData['Properties'];
            }
        }
        return $particulerDealArray;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 28-Feb-2017
    * @Purpose : For Managing(Adding/Removing) Optional Operation
    * Getting all Elements data that is required to manage optional operation list
    * @param $data : Array
    * @return array
    */
    public function manageOptionalOperation($data = array()){
        $manage_optional_operation = array();
        
        $dealData = $this->table->getInstanceListOfParticulerClass($data['deal_node_instance_id'], 'instance', 'node_instance_id');
        $boatLength                         = explode("'",current($dealData)['Length']);

        $opt_op_array['role_node_id']       = $data['deal_actor_role_node_id'];
        $opt_op_array['deal_node_id']       = $data['deal_instance_node_id'];
        $opt_op_array['optional_operation'] = 'yes';

        $temOptArr   = $this->getOperationList($opt_op_array);
        if($boatLength[0] >= 35)
        {
            unset($temOptArr[VANTAGE2K_OPERATION_NID]);
        }elseif($boatLength[0] < 35)
        {
            unset($temOptArr[VANTAGE4K_OPERATION_NID]);
        }
        $manage_optional_operation['optional_operation_list'] = $temOptArr;
        
        
        
        
        $list = $data['list'];
        $mappingRoleActorPersonal = current($list)['mappingRoleActor'] ? current($list)['mappingRoleActor'] : '';
    
        if(trim($mappingRoleActorPersonal) == '')
        {
            $map_data['deal_node_instance_id']  = $data['deal_instance_node_id'];
            $map_data['deal_user_role_node_id'] = $data['deal_actor_role_node_id'];
            $map_data['login_user_id']          = '';
            $mappingRoleActorPersonal           = $this->checkMappingDealOperationNodeID($map_data);
        }
        $manage_optional_operation['mapping_role_actor_personal'] = $mappingRoleActorPersonal;
        
        
        
        // Get all mapping role actor ids for a DEAL
        $instancepost['node_class_id']          = $data['node_class_id'];
        $instancepost['node_class_property_id'] = $data['node_class_property_id'];
        $instancepost['value']                  = $data['value'];
        $mappingRoleActorInstances = $this->searchPropertyValueInAllClassInstances($instancepost);
        $manage_optional_operation['manage_role_actor_instances'] = $mappingRoleActorInstances;
        
        
        
        $checked_operation_id_array = array_column($list, 'operationId');
        $newList = array();
        $permission_column = array_column($mappingRoleActorInstances, intval(ROLE_PID));
        foreach($checked_operation_id_array as $ky => $operation_id) {
            $resData1                                = $manage_optional_operation['optional_operation_list'][$operation_id];
            $ownedByIds                              = $resData1['Owned By'];
            $list[$ky]['Owned By']                   = $ownedByIds;
            foreach(explode(',',$ownedByIds) as $ownBy) {
                $mapRlActor = array_search($ownBy, $permission_column);
                $mapKey = array_keys($mappingRoleActorInstances)[$mapRlActor];
                $newList[] = array('operationId' => $operation_id, 'mappingRoleActor' => $mapKey);//, 'Owned By' => $ownBy);
            }
            unset($list[$ky]);
        }
        $list = $newList;
        $manage_optional_operation['list'] = $list;
        
        
        
        
        
        $resData        = $this->table->getInstanceListOfParticulerClass(MAPPING_DEAL_OPERATION_CLASS_ID, 'class', 'node_instance_id');        
        $manage_optional_operation['operation_result_array'] = $resData;
        
        
        
        $operationArray = array();
        
        foreach ($resData as $key => $array) 
        {
            $tempMappingRoleActorInstances  = $mappingRoleActorInstances;
            $resData1                       = $this->table->getInstanceListOfParticulerClass($array["Operation"], 'node', 'node_instance_id');
            
            // owned by
            $ownedBy        = explode(',',current($resData1)['Owned By']);
            $mapColumn      = array_column($tempMappingRoleActorInstances, intval(ROLE_PID));
            $diffMapColumn  = array_diff($mapColumn,$ownedBy);

            $arrKeys        = array_keys($tempMappingRoleActorInstances);
            foreach($diffMapColumn as $k1 => $v1) {
                unset($tempMappingRoleActorInstances[$arrKeys[$k1]]);
            }

            $tempMappingRoleActorInstancesKeys = array_keys($tempMappingRoleActorInstances);
            if (in_array($array["Mapping_Role_Actor"], $tempMappingRoleActorInstancesKeys)) {
                $operationArray[$key]       = $array;
            }
        }
        $manage_optional_operation['operation_array'] = $operationArray;
        
        
        
        return $manage_optional_operation;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 6-March-2017
    * @Purpose : For Managing(Adding/Removing) Optional Operation
    * @param $data : Array
    * @return array
    */
    public function manageOptionalOperationInstance($data = array()){
        $propertyId         = ($data['propertyId']) ? $data['propertyId'] : '';
        $operationlist      = ($data['insertOperation']) ? $data['insertOperation'] : array();
        $deleteOperation    = ($data['deleteOperation']) ? $data['deleteOperation'] : array();
        
        if(count($deleteOperation) > 0){
            $dataArray = $this->table->getInstanceListOfParticulerClass($deleteOperation, 'node_instance_id', 'optional_operation');
            if(count($dataArray)){
                $this->table->deleteOptionalOperationInstanceDataValue($dataArray);
            }
        }

        if(count($operationlist) > 0){
            $set_opt_operation_data['op_list']      = $operationlist;
            $set_opt_operation_data['propertyId']   = $propertyId;
            $this->setOperationData($set_opt_operation_data);
        }
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 6-March-2017
    * @Purpose : For Adding Optional Operation: Arrange Array For saving Operation
    * @param $data : Array
    */
    public function setOperationData($data = array()){ 
        $op_list    = $data['op_list'];
        $propertyId = $data['propertyId'];
        foreach($op_list as $key => $value)   
        {
            if(!isset($value['Document']) || trim($value['Document']) == ''){ $value['Document'] = ''; }
            if(!isset($value['Form']) || trim($value['Form']) == ''){ $value['Form'] = ''; }
            if(!isset($value['Status']) || trim($value['Status']) == ''){ $value['Status'] = ''; }            
            
            $datArray                           = array();
            $datArray['node_instance_id']       = $value['node_instance_id'];
            $datArray['node_class_id']          = MAPPING_DEAL_OPERATION_CLASS_ID;
            $datArray['node_class_property_id'] = array(MAPPING_ROLE_ACTOR_PID, OPERATION_PID, DOCUMENT_PID, FORM_PID, $propertyId);
            $datArray['value']                  = array($value['mappingRoleActor'], $value['operationId'], $value['Document'], $value['Form'], $value['Status']);
            $datArray['is_email']               = 'N';
            $datArray['status']                 = 'P'; 
            $returnRes                          = $this->setStructure($datArray, 'Instance');
        }
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 7-March-2017
    * @Purpose : For Deleting Optional Operation by cross icon
    * @param $data : Array
    */
    public function deleteOptionalOperationInstance($data = array()){
        
        $ownedByArr = $this->table->getInstanceListOfParticulerClass($data['operation_id'], 'node', 'node_id');
        $owned_by_users = current($ownedByArr)['Owned By'];
        $owned_by_users_arr = explode(',',$owned_by_users);
       
        $mappingRoleActorNid = array();
        $mappingRoleActor = $this->table->getInstanceListOfParticulerClass(MAPPING_ROLE_ACTOR_CLASS_ID, 'class', 'node_id');
        foreach ($mappingRoleActor as $key => $value) {
            if (in_array($value['Role'],$owned_by_users_arr) && $value['Deal'] == $data['deal_instance_node_id']) {
                $mappingRoleActorNid[] = $key;
            }
        }
        
        $customerData = $this->table->getInstanceListOfParticulerClass(MAPPING_DEAL_OPERATION_CLASS_ID, 'class', 'node_id');
        $insIds = array();
        foreach ($customerData as $key => $value) {
            if (in_array(intval($value['Mapping_Role_Actor']),$mappingRoleActorNid) && intval($value['Operation']) == intval($data['operation_id'])) {
                $insIds[] = $key;
            }
        }
        $dataArray = $this->table->getInstanceListOfParticulerClass($insIds, 'node_id', 'optional_operation');
        if(count($dataArray)){
            $this->table->deleteOptionalOperationInstanceDataValue($dataArray);
        }
    }
    
    /**
    * Created By: Kunal
    * Date: 8-March-2017
    * @Purpose : To get deal detail form data for view_form.php
    * @param $data : Array
    */
    public function getViewFormStructureData($data = array()){
        $viewFormData = array();
        //return ROLE_ADMINISTRATOR;
        $viewFormData['formData'] = $this->table->getFormStructure($data['add_form_instance_id']);
        $instanceNodeId = $this->table->getInstanceNodeId(DEAL_CLASS, $data['instance_id']);
        $viewFormData['archiveStatus'] = $this->table->checkInArchivedStatus($instanceNodeId);
        
        $viewFormData['instanceData'] = $this->table->getInstanceViewStructure($data['instance_id']);
        $viewFormData['dealId'] = $this->table->getTableCols(array('node_id'), 'node-instance', array('node_instance_id'), array($data['instance_id']));
        $viewFormData['instanceNData'] = $this->table->getParticulerColumnValue('node-instance', 'node_instance_id', $data['instance_id'], 'node_id');
        $viewFormData['roleArray'] = $this->table->getActorWithRoleAndDeal($viewFormData['instanceNData']);
        $post = array();
        $post['roleId'] = $data['login_role_id'];
        $post['classPId'] = REQUIRED_ROLES_PROP_ID;
        $viewFormData['requiredRoles'] = $this->table->getVisibleNRequiredRoles($post);
        if($data['login_role_id'] == ROLE_ADMINISTRATOR){
            $customerData = $this->table->getInstanceListOfParticulerClass(OPERATION_ROLE_CLASS_ID, 'class', 'node_id');
            $roleArray = array();
            foreach ($customerData as $key => $value) {
                if (intval($value['Mapped For']) == '396138') {
                    $roleArray[$key] = $value;
                }
            }

            $roleHtml = '';
            $roleViewArray = array();

            $roleCount = 0;

            $_commonOperation = $this->table->getInstanceListOfParticulerClass(OPERATION_CLASS_ID, 'class', 'node_id');
            foreach ($roleArray as $roleId => $roleName) {
                $role = $roleName['Title'];

                $_roles = array();
                $_roleId = $roleId;

                foreach ($_commonOperation as $key2 => $value1) {
                    $_commonRole = explode(',', $value1['Role']);
                    if (count($_commonRole) > 1 && in_array($_roleId, $_commonRole)) {
                        foreach ($_commonRole as $_key => $_value1) {
                            if ($_value1 != $_roleId) {
                                $_roles[trim($_value1)][] = trim($key2);
                            }
                        }
                    }
                }

                if (count($_roles) > 0) {
                    $data_settings = "data-settings = '" . json_encode($_roles) . "'";
                }

                $roleHtml .= '<option data-id=' . $roleId . ' ' . $data_settings . ' value="' . $roleId . '" >' . $role . '</option>';
                $roleViewArray[$roleId] = $role;
                $roleCount++;
            }

            $viewFormData['html'] = $roleHtml;
            $viewFormData['name'] = $roleViewArray;
        }
        return $viewFormData;
    }
    /**
    * Created By: Kunal
    * Date: 8-March-2017
    * @Purpose : To get deal detail with archive status for edit_form.php
    * @param $data : Array
    */
    public function getDealArchiveStatusForEdit($data = array()){
        $returnData = array();
        
        $returnData = $this->table->getTableCols(array('node_id','status'), 'node-instance', array('node_instance_id'), array($data['instanceId']));
        $instanceNodeId = $this->table->getInstanceNodeId(DEAL_CLASS, $data['instanceId']);
        $returnData['archiveStatus'] = $this->table->checkInArchivedStatus($instanceNodeId);
        
        return $returnData;
    }

    /**
    * Created By: Arvind Soni
    * Date: 8-March-2017
    * @Purpose : for optimize print package
    * @param $data : Array
    */
    public function getAllDocumentHtml($data = array()){
        $returnArray                                = array();
        $post                                       = array('deal_node_instance_id' => $data['deal_node_id'], 'deal_user_role_node_id' => $data['user_role_id'], 'login_user_id' => $data['user_login_id']);
        $mappingRoleActorInstanceId                 = $this->table->checkMappingDealOperationNodeID($post);
        $docArray                                   = array();
        $documentArray                              = array();
        $templateArray                              = array();
        if(intval($mappingRoleActorInstanceId) > 0)
        {
            if (count($data['documents_id'])) {
                $allOpeArray                        = $this->table->getInstanceListOfParticulerClass(MAPPING_DEAL_OPERATION_CLASS_ID, 'class', 'node_id');
                foreach ($data['documents_id'] as $key => $document_id) {
                    $operation_id           = '';
                    if($document_id == '757734')
                    {
                        $operation_id               = $document_id;
                    }
                    else
                    {
                        $operation_id               = $data['operation_id'][$key];
                    }

                    if(trim($operation_id) != '')
                    {
                        $postNew                     = array('mappingRoleActorInstanceId' => $mappingRoleActorInstanceId, 'operation_id' => $operation_id, 'nodeInstance' => '', 'allOpeArray' => $allOpeArray);
                        $docArray[$document_id]      = $this->table->getDealOperationFormId($postNew);
                        if($document_id != '757734')
                        {
                            $tempId = $document_id;
                            if($docArray[$document_id]['Document'] != "" && $docArray[$document_id]['Document'] != 'N/A')
                                $tempId = $docArray[$document_id]['Document'];
                            
                            $setpost                        = array('document_node_id' => $tempId, 'deal_instance_node_id' => $data['deal_node_id'], 'deal_user_role_id' => $data['user_role_id'], 'login_user_id' => $data['user_login_id'], 'mapping_class_node_id' => $data['class_nodeid'], 'operation_node_id' => $operation_id);
                            $documentArray[$document_id]    = $this->table->getDocumentData($setpost);
                            $templateArray[$document_id]    = $this->table->getTemplateType(array('node_instance_id' => $document_id));
                        }
                    }
                    else
                    {
                        $docArray[$document_id]         =   '';
                        $documentArray[$document_id]    =   '';
                        $templateArray[$document_id]    =   '';
                    }
                }
            }
        }
        
        $returnArray['mappingRoleActorInstanceId']  = $mappingRoleActorInstanceId;
        $returnArray['doc']                         = $docArray;
        $returnArray['document']                    = $documentArray;
        $returnArray['template']                    = $templateArray;
        return $returnArray;
    }
    /**
    * Created By: Kunal
    * Date: 10-March-2017
    * @Purpose : To get common operation document form
    * @param $data : Array
    */
    public function getSharedDocumentForm($_data = array()){
        $roleArray = $this->table->getActorWithRoleAndDeal($_data['deal_node_id']);
        foreach ($roleArray as $rolekey => $rolevalue) {
            $post['deal_node_instance_id'] = $_data['deal_node_id'];
            $post['deal_user_role_node_id'] = $rolevalue['role'];
            $post['login_user_id'] = $rolevalue['actor'];
            
            $mapping['mappingRoleActorInstanceId'] = $this->table->checkMappingDealOperationNodeID($post);
            $mapping['operation_id'] = $_data['operation_node_id'];
            
            $returnArray = $this->table->getDealOperationFormId($mapping);
            if ($returnArray['Document'] != "") {
                $data['login_user_id'] = $rolevalue['actor'];
                $data['deal_user_role_id'] = $rolevalue['role'];
                break;
            }
        }
        return $data;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 15-March-2017
    * @Purpose : To create menu list array
    * @param $menuListArray : Array
    * @param: return array
    */
    public function getFilterMenuCounts($menuListArray = array()) {
        $temp_menu = array();
        if(count($menuListArray) > 0){
            $temp_menu = $this->getChildFilterMenuCounts($menuListArray, $childarray = array());
        }
        return $temp_menu;
    }
    
    /**
    * Created By: Divya Rajput
    * Date: 15-March-2017
    * @Purpose : To get property id for a action url for menu list(Deal/Operation)
    * @param $data : Array
    */
    public function getChildFilterMenuCounts($menuChildListArray = array(), $childarray) {
        foreach($menuChildListArray as $menuChildkey => $menuChildValue){
            if(trim($menuChildValue['action (url)']) != '' && strpos($menuChildValue['action (url)'], '~$~')){
                $childarray[$menuChildkey] = $menuChildValue;
                $postArray = explode("~$~", strtolower($menuChildValue['action (url)']));
                $childarray[$menuChildkey]['filterChild'] = $this->getFilterCounts($postArray);
            }else if(!strpos($menuChildValue['action (url)'], '~$~')){
                $childarray[$menuChildkey] = $menuChildValue;
            }
            
            if(isset($menuChildValue['child']) && count($menuChildValue['child'] > 0)){
                $tempchildarray = array();
                $data = $this->getChildFilterMenuCounts($menuChildValue['child'], $tempchildarray);
                $childarray[$menuChildkey]['child'] = $data;
            }
        }
        return $childarray;        
    }
    /**
    * Created By: Kunal
    * Date: 22-March-2017
    * @Purpose : To get all operation list for print package
    * @param $data : Array
    */
    public function finalOperationList($post) {
        $returndata = array();
        $operation_arr = $post['opr_list'];
        $count = 0;
        $opr_doc_print_order = array();
        $opr_no_doc_print_order = array();
        $opr_doc_arr = array();
        $opr_no_doc_arr = array();
        $opr_doc_arr_counter = 0;
        $opr_no_doc_arr_counter = 0;
        foreach($operation_arr as $key=>$row)
        {
            if(isset($row['PDF Template NID']) && $row['PDF Template NID'])
            {    
                $opr_doc_arr[$opr_doc_arr_counter] = $row;
                $opr_doc_arr[$opr_doc_arr_counter]['operation_node_id'] = $key;
                $opr_doc_arr_counter++;
            }else{
                $opr_no_doc_arr[$opr_no_doc_arr_counter] = $row;
                $opr_no_doc_arr[$opr_no_doc_arr_counter]['operation_node_id'] = $key;
                $opr_no_doc_arr_counter++;
            }    
        }
        foreach ($opr_doc_arr as $key=>$row)
        {
            if(isset($row['Print Order']) && $row['Print Order'])
                $opr_doc_print_order[$key] = $row['Print Order'];
            else
                $opr_doc_print_order[$key] = '999999';   
        }
        foreach ($opr_no_doc_arr as $key=>$row)
        {
            if(isset($row['Print Order']) && $row['Print Order'])
                $opr_no_doc_print_order[$key] = $row['Print Order'];
            else
                $opr_no_doc_print_order[$key] = '999999';   
        }
        $newoprdocarr = array_multisort($opr_doc_print_order, SORT_ASC,$opr_doc_arr);
        $newoprnodocarr = array_multisort($opr_no_doc_print_order, SORT_ASC,$opr_no_doc_arr);
        $operation_arr = $opr_doc_arr;
        foreach($opr_no_doc_arr as $row)
            $operation_arr[] = $row;
        if (count($operation_arr)) {
            foreach ($operation_arr as $key => $value) {
                if (isset($value['PDF Template NID']) && $value['PDF Template NID']) {
                    $document_node_id = $value['PDF Template NID'];
                    $operation_node_id = $value['operation_node_id'];
                    $post1 = array();
                    $post1['deal_node_instance_id'] = $post['deal_instance_node_id'];
                    $post1['deal_user_role_node_id'] = $post['deal_user_role_id'];
                    $post1['login_user_id'] = $post['login_user_id'];
                    $mappingRoleActorInstanceId = $this->table->checkMappingDealOperationNodeID($post1);
                    $post1 = array();
                    $post1['mappingRoleActorInstanceId'] = $mappingRoleActorInstanceId;
                    $post1['operation_id'] = $operation_node_id;
                    $returnArray = $this->table->getDealOperationFormId($post1);
                    if ($returnArray['Document'] != "" && $returnArray['Document'] != 'N/A') {
                        $document_node_id = $returnArray['Document'];
                    } else {
                        $document_node_id = $document_node_id;
                    }
                    $documentData = $this->table->getDocumentData($document_node_id, $post['deal_instance_node_id'], $post['deal_user_role_id'], $post['login_user_id'], $post['mapping_class_node_id'], $operation_node_id);
                    $tempArray = $this->table->getTemplateType($document_node_id);
                    $operation_arr[$key]['document_type'] = $tempArray['value'];
                    
                }elseif($value['operation_node_id']==COMPLETE_FUNDING_ID){
                    $operation_node_id = $value['operation_node_id'];
                    $post1 = array();
                    $post1['deal_node_instance_id'] = $post['deal_instance_node_id'];
                    $post1['deal_user_role_node_id'] = $post['deal_user_role_id'];
                    $post1['login_user_id'] = $post['login_user_id'];
                    $mappingRoleActorInstanceId = $this->table->checkMappingDealOperationNodeID($post1);
                    $post1 = array();
                    $post1['mappingRoleActorInstanceId'] = $mappingRoleActorInstanceId;
                    $post1['operation_id'] = $operation_node_id;
                    
                    $returnData = $this->table->getDealOperationFormId($post1);
                    //return $returnData;
                    $operation_arr[$key]['AppOneFormData'] = $returnData['FormData'];
                }
            }
        }
        
        
        $returndata['oprlist'] = $operation_arr;
        return $returndata;
    }
    
    /**
    * Created By: Kunal
    * Date: 22-March-2017
    * @Purpose : To get all operation list for print package
    * @param $data : Array
    */
    public function getDashboardData($post) {
        $returndata = array();
        //return DEAL_PERMISSIONS_PROP_ID;
        if (intval($post['menuLayoutInstanceId']) > 0)
            $returndata['menu'] = $this->table->getFormStructure($post['menuLayoutInstanceId']);
        else
            $returndata['menu'] = '';
        
        if (intval($post['listLayoutInstanceId']) > 0)
            $returndata['list'] = $this->table->getFormStructure($post['listLayoutInstanceId']);
        else
            $returndata['list'] = '';
        
        if (intval($post['detailLayoutInstanceId']) > 0)
            $returndata['detail'] = $this->table->getFormStructure($post['detailLayoutInstanceId']);
        else
            $returndata['detail'] = '';
        
        if (intval($post['loginRoleId']) > 0){
            $arr['roleId'] = $post['loginRoleId'];
            $arr['classPId'] = DEAL_PERMISSIONS_PROP_ID;
            $returndata['dealPermissionArr'] = $this->table->getDealPermissions($arr);
        }else{
            $returndata['dealPermissionArr'] = '';
        }
        return $returndata;
    }
    
    /**
    * Created By: Kunal
    * Date: 24-March-2017
    * @Purpose : To get deal detail form data for edit_form.php
    * @param $data : Array
    */
    public function getEditFormStructureData($data = array()){
        $viewFormData = array();
        //return ROLE_ADMINISTRATOR;
        $viewFormData['formData'] = $this->table->getFormStructure($data['add_form_instance_id']);
        $viewFormData['instanceData'] = $this->table->getInstanceViewStructure($data['instance_id']);
        //for manage PPC CLASS
        $_allowedSectionTabArr = array(PPC_SETTING);
        $_tabFlag = (in_array(trim($data['heading']), $_allowedSectionTabArr)) ? true : false;
        if ($_tabFlag) {
            $data1['class_node_id'] = PERFORMANCE_REVIEW_CLASS_NODEID;
            $data1['columns'] = array('TEAM MEMBER > ID');
        } else {
            $data1['class_node_id'] = DEAL_CLASS_NODEID;
            $data1['columns'] = array('GENERAL>Deal ID #');
        }
        $propertyArray = $this->table->getListHeader($data1);
        $_dealPId = key($propertyArray);
        $viewFormData['dealId'] = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($data['instance_id'], $_dealPId));
        
        //getRoleDropDown
        $customerData = $this->table->getInstanceListOfParticulerClass(OPERATION_ROLE_CLASS_ID, 'class', 'node_id');
        $roleArray = array();
        foreach ($customerData as $key => $value) {
            if (intval($value['Mapped For']) == '396138') {
                $roleArray[$key] = $value;
            }
        }
        $roleHtml = '';
        $roleViewArray = array();
        $roleCount = 0;
        $_commonOperation = $this->table->getInstanceListOfParticulerClass(OPERATION_CLASS_ID, 'class', 'node_id');
        foreach ($roleArray as $roleId => $roleName) {
            $role = $roleName['Title'];
            $_roles = array();
            $_roleId = $roleId;
            foreach ($_commonOperation as $key2 => $value1) {
                $_commonRole = explode(',', $value1['Role']);
                if (count($_commonRole) > 1 && in_array($_roleId, $_commonRole)) {
                    foreach ($_commonRole as $_key => $_value1) {
                        if ($_value1 != $_roleId) {
                            $_roles[trim($_value1)][] = trim($key2);
                        }
                    }
                }
            }
            if (count($_roles) > 0) {
                $data_settings = "data-settings = '" . json_encode($_roles) . "'";
            }
            $roleHtml .= '<option data-id=' . $roleId . ' ' . $data_settings . ' value="' . $roleId . '" >' . $role . '</option>';
            $roleViewArray[$roleId] = $role;
            $roleCount++;
        }
        $viewFormData['html'] = $roleHtml;
        $viewFormData['name'] = $roleViewArray;
        //getRoleDropDown End
        
        $viewFormData['instanceNData'] = $this->table->getParticulerColumnValue('node-instance', 'node_instance_id', $data['instance_id'], 'node_id');
        $viewFormData['roleArray'] = $this->table->getActorWithRoleAndDeal($viewFormData['instanceNData']);
        $post = array();
        $post['roleId'] = $data['login_role_id'];
        $post['classPId'] = REQUIRED_ROLES_PROP_ID;
        $viewFormData['requiredRoles'] = $this->table->getVisibleNRequiredRoles($post);
        
        $viewFormData['dealType'] = $this->table->getTableCols(array('value'), 'node-instance-property', array('node_instance_id', 'node_class_property_id'), array($instanceId, DEAL_PAYMENT_TYPE_PROPERTY_ID));
        
        return $viewFormData;
    }
    
    public function getDialogueListOfParticulerCourse($post) {
        return $this->table->getDialogueListOfParticulerCourse($post);
    }
    
    public function getBlankIndividualHistoryCourses($post) {
        return $this->table->getBlankIndividualHistoryCourses($post);
    }
    public function copyDialogueIndvHistoryToCourseIndvHistory($post) {
        return $this->table->copyDialogueIndvHistoryToCourseIndvHistory($post);
    }
}
?>